// Code generated by protoc-gen-go. DO NOT EDIT.
// source: IM.BaseDefine.proto

//option go_package = "github.com/teamtalk-remix/test-client-go/proto/IM_BaseDefine";

package IM_BaseDefine

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// service id
type ServiceID int32

const (
	ServiceID_SID_LOGIN          ServiceID = 1
	ServiceID_SID_BUDDY_LIST     ServiceID = 2
	ServiceID_SID_MSG            ServiceID = 3
	ServiceID_SID_GROUP          ServiceID = 4
	ServiceID_SID_FILE           ServiceID = 5
	ServiceID_SID_SWITCH_SERVICE ServiceID = 6
	ServiceID_SID_OTHER          ServiceID = 7
	ServiceID_SID_INTERNAL       ServiceID = 8
)

var ServiceID_name = map[int32]string{
	1: "SID_LOGIN",
	2: "SID_BUDDY_LIST",
	3: "SID_MSG",
	4: "SID_GROUP",
	5: "SID_FILE",
	6: "SID_SWITCH_SERVICE",
	7: "SID_OTHER",
	8: "SID_INTERNAL",
}

var ServiceID_value = map[string]int32{
	"SID_LOGIN":          1,
	"SID_BUDDY_LIST":     2,
	"SID_MSG":            3,
	"SID_GROUP":          4,
	"SID_FILE":           5,
	"SID_SWITCH_SERVICE": 6,
	"SID_OTHER":          7,
	"SID_INTERNAL":       8,
}

func (x ServiceID) Enum() *ServiceID {
	p := new(ServiceID)
	*p = x
	return p
}

func (x ServiceID) String() string {
	return proto.EnumName(ServiceID_name, int32(x))
}

func (x *ServiceID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServiceID_value, data, "ServiceID")
	if err != nil {
		return err
	}
	*x = ServiceID(value)
	return nil
}

func (ServiceID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{0}
}

// command id for login
type CommandID int32

const (
	CommandID_CID_LOGIN_REQ_MSGSERVER         CommandID = 257
	CommandID_CID_LOGIN_RES_MSGSERVER         CommandID = 258
	CommandID_CID_LOGIN_REQ_USERLOGIN         CommandID = 259
	CommandID_CID_LOGIN_RES_USERLOGIN         CommandID = 260
	CommandID_CID_LOGIN_REQ_LOGINOUT          CommandID = 261
	CommandID_CID_LOGIN_RES_LOGINOUT          CommandID = 262
	CommandID_CID_LOGIN_KICK_USER             CommandID = 263
	CommandID_CID_LOGIN_REQ_DEVICETOKEN       CommandID = 264
	CommandID_CID_LOGIN_RES_DEVICETOKEN       CommandID = 265
	CommandID_CID_LOGIN_REQ_KICKPCCLIENT      CommandID = 266
	CommandID_CID_LOGIN_RES_KICKPCCLIENT      CommandID = 267
	CommandID_CID_LOGIN_REQ_PUSH_SHIELD       CommandID = 268
	CommandID_CID_LOGIN_RES_PUSH_SHIELD       CommandID = 269
	CommandID_CID_LOGIN_REQ_QUERY_PUSH_SHIELD CommandID = 270
	CommandID_CID_LOGIN_RES_QUERY_PUSH_SHIELD CommandID = 271
	// command id for buddy list
	CommandID_CID_BUDDY_LIST_RECENT_CONTACT_SESSION_REQUEST  CommandID = 513
	CommandID_CID_BUDDY_LIST_RECENT_CONTACT_SESSION_RESPONSE CommandID = 514
	CommandID_CID_BUDDY_LIST_STATUS_NOTIFY                   CommandID = 515
	CommandID_CID_BUDDY_LIST_USER_INFO_REQUEST               CommandID = 516
	CommandID_CID_BUDDY_LIST_USER_INFO_RESPONSE              CommandID = 517
	CommandID_CID_BUDDY_LIST_REMOVE_SESSION_REQ              CommandID = 518
	CommandID_CID_BUDDY_LIST_REMOVE_SESSION_RES              CommandID = 519
	CommandID_CID_BUDDY_LIST_ALL_USER_REQUEST                CommandID = 520
	CommandID_CID_BUDDY_LIST_ALL_USER_RESPONSE               CommandID = 521
	CommandID_CID_BUDDY_LIST_USERS_STATUS_REQUEST            CommandID = 522
	CommandID_CID_BUDDY_LIST_USERS_STATUS_RESPONSE           CommandID = 523
	CommandID_CID_BUDDY_LIST_CHANGE_AVATAR_REQUEST           CommandID = 524
	CommandID_CID_BUDDY_LIST_CHANGE_AVATAR_RESPONSE          CommandID = 525
	CommandID_CID_BUDDY_LIST_PC_LOGIN_STATUS_NOTIFY          CommandID = 526
	CommandID_CID_BUDDY_LIST_REMOVE_SESSION_NOTIFY           CommandID = 527
	CommandID_CID_BUDDY_LIST_DEPARTMENT_REQUEST              CommandID = 528
	CommandID_CID_BUDDY_LIST_DEPARTMENT_RESPONSE             CommandID = 529
	CommandID_CID_BUDDY_LIST_AVATAR_CHANGED_NOTIFY           CommandID = 530
	CommandID_CID_BUDDY_LIST_CHANGE_SIGN_INFO_REQUEST        CommandID = 531
	CommandID_CID_BUDDY_LIST_CHANGE_SIGN_INFO_RESPONSE       CommandID = 532
	CommandID_CID_BUDDY_LIST_SIGN_INFO_CHANGED_NOTIFY        CommandID = 533
	// command id for msg
	CommandID_CID_MSG_DATA                  CommandID = 769
	CommandID_CID_MSG_DATA_ACK              CommandID = 770
	CommandID_CID_MSG_READ_ACK              CommandID = 771
	CommandID_CID_MSG_READ_NOTIFY           CommandID = 772
	CommandID_CID_MSG_TIME_REQUEST          CommandID = 773
	CommandID_CID_MSG_TIME_RESPONSE         CommandID = 774
	CommandID_CID_MSG_UNREAD_CNT_REQUEST    CommandID = 775
	CommandID_CID_MSG_UNREAD_CNT_RESPONSE   CommandID = 776
	CommandID_CID_MSG_LIST_REQUEST          CommandID = 777
	CommandID_CID_MSG_LIST_RESPONSE         CommandID = 778
	CommandID_CID_MSG_GET_LATEST_MSG_ID_REQ CommandID = 779
	CommandID_CID_MSG_GET_LATEST_MSG_ID_RSP CommandID = 780
	CommandID_CID_MSG_GET_BY_MSG_ID_REQ     CommandID = 781
	CommandID_CID_MSG_GET_BY_MSG_ID_RES     CommandID = 782
	// command id for group message
	CommandID_CID_GROUP_NORMAL_LIST_REQUEST    CommandID = 1025
	CommandID_CID_GROUP_NORMAL_LIST_RESPONSE   CommandID = 1026
	CommandID_CID_GROUP_INFO_REQUEST           CommandID = 1027
	CommandID_CID_GROUP_INFO_RESPONSE          CommandID = 1028
	CommandID_CID_GROUP_CREATE_REQUEST         CommandID = 1029
	CommandID_CID_GROUP_CREATE_RESPONSE        CommandID = 1030
	CommandID_CID_GROUP_CHANGE_MEMBER_REQUEST  CommandID = 1031
	CommandID_CID_GROUP_CHANGE_MEMBER_RESPONSE CommandID = 1032
	CommandID_CID_GROUP_SHIELD_GROUP_REQUEST   CommandID = 1033
	CommandID_CID_GROUP_SHIELD_GROUP_RESPONSE  CommandID = 1034
	CommandID_CID_GROUP_CHANGE_MEMBER_NOTIFY   CommandID = 1035
	CommandID_CID_FILE_LOGIN_REQ               CommandID = 1281
	CommandID_CID_FILE_LOGIN_RES               CommandID = 1282
	CommandID_CID_FILE_STATE                   CommandID = 1283
	CommandID_CID_FILE_PULL_DATA_REQ           CommandID = 1284
	CommandID_CID_FILE_PULL_DATA_RSP           CommandID = 1285
	// To MsgServer
	CommandID_CID_FILE_REQUEST         CommandID = 1286
	CommandID_CID_FILE_RESPONSE        CommandID = 1287
	CommandID_CID_FILE_NOTIFY          CommandID = 1288
	CommandID_CID_FILE_HAS_OFFLINE_REQ CommandID = 1289
	CommandID_CID_FILE_HAS_OFFLINE_RES CommandID = 1290
	CommandID_CID_FILE_ADD_OFFLINE_REQ CommandID = 1291
	CommandID_CID_FILE_DEL_OFFLINE_REQ CommandID = 1292
	// command id for switch service
	CommandID_CID_SWITCH_P2P_CMD             CommandID = 1537
	CommandID_CID_OTHER_HEARTBEAT            CommandID = 1793
	CommandID_CID_OTHER_STOP_RECV_PACKET     CommandID = 1794
	CommandID_CID_OTHER_VALIDATE_REQ         CommandID = 1795
	CommandID_CID_OTHER_VALIDATE_RSP         CommandID = 1796
	CommandID_CID_OTHER_GET_DEVICE_TOKEN_REQ CommandID = 1797
	CommandID_CID_OTHER_GET_DEVICE_TOKEN_RSP CommandID = 1798
	CommandID_CID_OTHER_ROLE_SET             CommandID = 1799
	CommandID_CID_OTHER_ONLINE_USER_INFO     CommandID = 1800
	CommandID_CID_OTHER_MSG_SERV_INFO        CommandID = 1801
	CommandID_CID_OTHER_USER_STATUS_UPDATE   CommandID = 1802
	CommandID_CID_OTHER_USER_CNT_UPDATE      CommandID = 1803
	CommandID_CID_OTHER_SERVER_KICK_USER     CommandID = 1805
	CommandID_CID_OTHER_LOGIN_STATUS_NOTIFY  CommandID = 1806
	CommandID_CID_OTHER_PUSH_TO_USER_REQ     CommandID = 1807
	CommandID_CID_OTHER_PUSH_TO_USER_RSP     CommandID = 1808
	CommandID_CID_OTHER_GET_SHIELD_REQ       CommandID = 1809
	CommandID_CID_OTHER_GET_SHIELD_RSP       CommandID = 1810
	CommandID_CID_OTHER_FILE_TRANSFER_REQ    CommandID = 1841
	CommandID_CID_OTHER_FILE_TRANSFER_RSP    CommandID = 1842
	CommandID_CID_OTHER_FILE_SERVER_IP_REQ   CommandID = 1843
	CommandID_CID_OTHER_FILE_SERVER_IP_RSP   CommandID = 1844
)

var CommandID_name = map[int32]string{
	257:  "CID_LOGIN_REQ_MSGSERVER",
	258:  "CID_LOGIN_RES_MSGSERVER",
	259:  "CID_LOGIN_REQ_USERLOGIN",
	260:  "CID_LOGIN_RES_USERLOGIN",
	261:  "CID_LOGIN_REQ_LOGINOUT",
	262:  "CID_LOGIN_RES_LOGINOUT",
	263:  "CID_LOGIN_KICK_USER",
	264:  "CID_LOGIN_REQ_DEVICETOKEN",
	265:  "CID_LOGIN_RES_DEVICETOKEN",
	266:  "CID_LOGIN_REQ_KICKPCCLIENT",
	267:  "CID_LOGIN_RES_KICKPCCLIENT",
	268:  "CID_LOGIN_REQ_PUSH_SHIELD",
	269:  "CID_LOGIN_RES_PUSH_SHIELD",
	270:  "CID_LOGIN_REQ_QUERY_PUSH_SHIELD",
	271:  "CID_LOGIN_RES_QUERY_PUSH_SHIELD",
	513:  "CID_BUDDY_LIST_RECENT_CONTACT_SESSION_REQUEST",
	514:  "CID_BUDDY_LIST_RECENT_CONTACT_SESSION_RESPONSE",
	515:  "CID_BUDDY_LIST_STATUS_NOTIFY",
	516:  "CID_BUDDY_LIST_USER_INFO_REQUEST",
	517:  "CID_BUDDY_LIST_USER_INFO_RESPONSE",
	518:  "CID_BUDDY_LIST_REMOVE_SESSION_REQ",
	519:  "CID_BUDDY_LIST_REMOVE_SESSION_RES",
	520:  "CID_BUDDY_LIST_ALL_USER_REQUEST",
	521:  "CID_BUDDY_LIST_ALL_USER_RESPONSE",
	522:  "CID_BUDDY_LIST_USERS_STATUS_REQUEST",
	523:  "CID_BUDDY_LIST_USERS_STATUS_RESPONSE",
	524:  "CID_BUDDY_LIST_CHANGE_AVATAR_REQUEST",
	525:  "CID_BUDDY_LIST_CHANGE_AVATAR_RESPONSE",
	526:  "CID_BUDDY_LIST_PC_LOGIN_STATUS_NOTIFY",
	527:  "CID_BUDDY_LIST_REMOVE_SESSION_NOTIFY",
	528:  "CID_BUDDY_LIST_DEPARTMENT_REQUEST",
	529:  "CID_BUDDY_LIST_DEPARTMENT_RESPONSE",
	530:  "CID_BUDDY_LIST_AVATAR_CHANGED_NOTIFY",
	531:  "CID_BUDDY_LIST_CHANGE_SIGN_INFO_REQUEST",
	532:  "CID_BUDDY_LIST_CHANGE_SIGN_INFO_RESPONSE",
	533:  "CID_BUDDY_LIST_SIGN_INFO_CHANGED_NOTIFY",
	769:  "CID_MSG_DATA",
	770:  "CID_MSG_DATA_ACK",
	771:  "CID_MSG_READ_ACK",
	772:  "CID_MSG_READ_NOTIFY",
	773:  "CID_MSG_TIME_REQUEST",
	774:  "CID_MSG_TIME_RESPONSE",
	775:  "CID_MSG_UNREAD_CNT_REQUEST",
	776:  "CID_MSG_UNREAD_CNT_RESPONSE",
	777:  "CID_MSG_LIST_REQUEST",
	778:  "CID_MSG_LIST_RESPONSE",
	779:  "CID_MSG_GET_LATEST_MSG_ID_REQ",
	780:  "CID_MSG_GET_LATEST_MSG_ID_RSP",
	781:  "CID_MSG_GET_BY_MSG_ID_REQ",
	782:  "CID_MSG_GET_BY_MSG_ID_RES",
	1025: "CID_GROUP_NORMAL_LIST_REQUEST",
	1026: "CID_GROUP_NORMAL_LIST_RESPONSE",
	1027: "CID_GROUP_INFO_REQUEST",
	1028: "CID_GROUP_INFO_RESPONSE",
	1029: "CID_GROUP_CREATE_REQUEST",
	1030: "CID_GROUP_CREATE_RESPONSE",
	1031: "CID_GROUP_CHANGE_MEMBER_REQUEST",
	1032: "CID_GROUP_CHANGE_MEMBER_RESPONSE",
	1033: "CID_GROUP_SHIELD_GROUP_REQUEST",
	1034: "CID_GROUP_SHIELD_GROUP_RESPONSE",
	1035: "CID_GROUP_CHANGE_MEMBER_NOTIFY",
	1281: "CID_FILE_LOGIN_REQ",
	1282: "CID_FILE_LOGIN_RES",
	1283: "CID_FILE_STATE",
	1284: "CID_FILE_PULL_DATA_REQ",
	1285: "CID_FILE_PULL_DATA_RSP",
	1286: "CID_FILE_REQUEST",
	1287: "CID_FILE_RESPONSE",
	1288: "CID_FILE_NOTIFY",
	1289: "CID_FILE_HAS_OFFLINE_REQ",
	1290: "CID_FILE_HAS_OFFLINE_RES",
	1291: "CID_FILE_ADD_OFFLINE_REQ",
	1292: "CID_FILE_DEL_OFFLINE_REQ",
	1537: "CID_SWITCH_P2P_CMD",
	1793: "CID_OTHER_HEARTBEAT",
	1794: "CID_OTHER_STOP_RECV_PACKET",
	1795: "CID_OTHER_VALIDATE_REQ",
	1796: "CID_OTHER_VALIDATE_RSP",
	1797: "CID_OTHER_GET_DEVICE_TOKEN_REQ",
	1798: "CID_OTHER_GET_DEVICE_TOKEN_RSP",
	1799: "CID_OTHER_ROLE_SET",
	1800: "CID_OTHER_ONLINE_USER_INFO",
	1801: "CID_OTHER_MSG_SERV_INFO",
	1802: "CID_OTHER_USER_STATUS_UPDATE",
	1803: "CID_OTHER_USER_CNT_UPDATE",
	1805: "CID_OTHER_SERVER_KICK_USER",
	1806: "CID_OTHER_LOGIN_STATUS_NOTIFY",
	1807: "CID_OTHER_PUSH_TO_USER_REQ",
	1808: "CID_OTHER_PUSH_TO_USER_RSP",
	1809: "CID_OTHER_GET_SHIELD_REQ",
	1810: "CID_OTHER_GET_SHIELD_RSP",
	1841: "CID_OTHER_FILE_TRANSFER_REQ",
	1842: "CID_OTHER_FILE_TRANSFER_RSP",
	1843: "CID_OTHER_FILE_SERVER_IP_REQ",
	1844: "CID_OTHER_FILE_SERVER_IP_RSP",
}

var CommandID_value = map[string]int32{
	"CID_LOGIN_REQ_MSGSERVER":                        257,
	"CID_LOGIN_RES_MSGSERVER":                        258,
	"CID_LOGIN_REQ_USERLOGIN":                        259,
	"CID_LOGIN_RES_USERLOGIN":                        260,
	"CID_LOGIN_REQ_LOGINOUT":                         261,
	"CID_LOGIN_RES_LOGINOUT":                         262,
	"CID_LOGIN_KICK_USER":                            263,
	"CID_LOGIN_REQ_DEVICETOKEN":                      264,
	"CID_LOGIN_RES_DEVICETOKEN":                      265,
	"CID_LOGIN_REQ_KICKPCCLIENT":                     266,
	"CID_LOGIN_RES_KICKPCCLIENT":                     267,
	"CID_LOGIN_REQ_PUSH_SHIELD":                      268,
	"CID_LOGIN_RES_PUSH_SHIELD":                      269,
	"CID_LOGIN_REQ_QUERY_PUSH_SHIELD":                270,
	"CID_LOGIN_RES_QUERY_PUSH_SHIELD":                271,
	"CID_BUDDY_LIST_RECENT_CONTACT_SESSION_REQUEST":  513,
	"CID_BUDDY_LIST_RECENT_CONTACT_SESSION_RESPONSE": 514,
	"CID_BUDDY_LIST_STATUS_NOTIFY":                   515,
	"CID_BUDDY_LIST_USER_INFO_REQUEST":               516,
	"CID_BUDDY_LIST_USER_INFO_RESPONSE":              517,
	"CID_BUDDY_LIST_REMOVE_SESSION_REQ":              518,
	"CID_BUDDY_LIST_REMOVE_SESSION_RES":              519,
	"CID_BUDDY_LIST_ALL_USER_REQUEST":                520,
	"CID_BUDDY_LIST_ALL_USER_RESPONSE":               521,
	"CID_BUDDY_LIST_USERS_STATUS_REQUEST":            522,
	"CID_BUDDY_LIST_USERS_STATUS_RESPONSE":           523,
	"CID_BUDDY_LIST_CHANGE_AVATAR_REQUEST":           524,
	"CID_BUDDY_LIST_CHANGE_AVATAR_RESPONSE":          525,
	"CID_BUDDY_LIST_PC_LOGIN_STATUS_NOTIFY":          526,
	"CID_BUDDY_LIST_REMOVE_SESSION_NOTIFY":           527,
	"CID_BUDDY_LIST_DEPARTMENT_REQUEST":              528,
	"CID_BUDDY_LIST_DEPARTMENT_RESPONSE":             529,
	"CID_BUDDY_LIST_AVATAR_CHANGED_NOTIFY":           530,
	"CID_BUDDY_LIST_CHANGE_SIGN_INFO_REQUEST":        531,
	"CID_BUDDY_LIST_CHANGE_SIGN_INFO_RESPONSE":       532,
	"CID_BUDDY_LIST_SIGN_INFO_CHANGED_NOTIFY":        533,
	"CID_MSG_DATA":                                   769,
	"CID_MSG_DATA_ACK":                               770,
	"CID_MSG_READ_ACK":                               771,
	"CID_MSG_READ_NOTIFY":                            772,
	"CID_MSG_TIME_REQUEST":                           773,
	"CID_MSG_TIME_RESPONSE":                          774,
	"CID_MSG_UNREAD_CNT_REQUEST":                     775,
	"CID_MSG_UNREAD_CNT_RESPONSE":                    776,
	"CID_MSG_LIST_REQUEST":                           777,
	"CID_MSG_LIST_RESPONSE":                          778,
	"CID_MSG_GET_LATEST_MSG_ID_REQ":                  779,
	"CID_MSG_GET_LATEST_MSG_ID_RSP":                  780,
	"CID_MSG_GET_BY_MSG_ID_REQ":                      781,
	"CID_MSG_GET_BY_MSG_ID_RES":                      782,
	"CID_GROUP_NORMAL_LIST_REQUEST":                  1025,
	"CID_GROUP_NORMAL_LIST_RESPONSE":                 1026,
	"CID_GROUP_INFO_REQUEST":                         1027,
	"CID_GROUP_INFO_RESPONSE":                        1028,
	"CID_GROUP_CREATE_REQUEST":                       1029,
	"CID_GROUP_CREATE_RESPONSE":                      1030,
	"CID_GROUP_CHANGE_MEMBER_REQUEST":                1031,
	"CID_GROUP_CHANGE_MEMBER_RESPONSE":               1032,
	"CID_GROUP_SHIELD_GROUP_REQUEST":                 1033,
	"CID_GROUP_SHIELD_GROUP_RESPONSE":                1034,
	"CID_GROUP_CHANGE_MEMBER_NOTIFY":                 1035,
	"CID_FILE_LOGIN_REQ":                             1281,
	"CID_FILE_LOGIN_RES":                             1282,
	"CID_FILE_STATE":                                 1283,
	"CID_FILE_PULL_DATA_REQ":                         1284,
	"CID_FILE_PULL_DATA_RSP":                         1285,
	"CID_FILE_REQUEST":                               1286,
	"CID_FILE_RESPONSE":                              1287,
	"CID_FILE_NOTIFY":                                1288,
	"CID_FILE_HAS_OFFLINE_REQ":                       1289,
	"CID_FILE_HAS_OFFLINE_RES":                       1290,
	"CID_FILE_ADD_OFFLINE_REQ":                       1291,
	"CID_FILE_DEL_OFFLINE_REQ":                       1292,
	"CID_SWITCH_P2P_CMD":                             1537,
	"CID_OTHER_HEARTBEAT":                            1793,
	"CID_OTHER_STOP_RECV_PACKET":                     1794,
	"CID_OTHER_VALIDATE_REQ":                         1795,
	"CID_OTHER_VALIDATE_RSP":                         1796,
	"CID_OTHER_GET_DEVICE_TOKEN_REQ":                 1797,
	"CID_OTHER_GET_DEVICE_TOKEN_RSP":                 1798,
	"CID_OTHER_ROLE_SET":                             1799,
	"CID_OTHER_ONLINE_USER_INFO":                     1800,
	"CID_OTHER_MSG_SERV_INFO":                        1801,
	"CID_OTHER_USER_STATUS_UPDATE":                   1802,
	"CID_OTHER_USER_CNT_UPDATE":                      1803,
	"CID_OTHER_SERVER_KICK_USER":                     1805,
	"CID_OTHER_LOGIN_STATUS_NOTIFY":                  1806,
	"CID_OTHER_PUSH_TO_USER_REQ":                     1807,
	"CID_OTHER_PUSH_TO_USER_RSP":                     1808,
	"CID_OTHER_GET_SHIELD_REQ":                       1809,
	"CID_OTHER_GET_SHIELD_RSP":                       1810,
	"CID_OTHER_FILE_TRANSFER_REQ":                    1841,
	"CID_OTHER_FILE_TRANSFER_RSP":                    1842,
	"CID_OTHER_FILE_SERVER_IP_REQ":                   1843,
	"CID_OTHER_FILE_SERVER_IP_RSP":                   1844,
}

func (x CommandID) Enum() *CommandID {
	p := new(CommandID)
	*p = x
	return p
}

func (x CommandID) String() string {
	return proto.EnumName(CommandID_name, int32(x))
}

func (x *CommandID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CommandID_value, data, "CommandID")
	if err != nil {
		return err
	}
	*x = CommandID(value)
	return nil
}

func (CommandID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{1}
}

type ResultType int32

const (
	ResultType_REFUSE_REASON_NONE               ResultType = 0
	ResultType_REFUSE_REASON_NO_MSG_SERVER      ResultType = 1
	ResultType_REFUSE_REASON_MSG_SERVER_FULL    ResultType = 2
	ResultType_REFUSE_REASON_NO_DB_SERVER       ResultType = 3
	ResultType_REFUSE_REASON_NO_LOGIN_SERVER    ResultType = 4
	ResultType_REFUSE_REASON_NO_ROUTE_SERVER    ResultType = 5
	ResultType_REFUSE_REASON_DB_VALIDATE_FAILED ResultType = 6
	ResultType_REFUSE_REASON_VERSION_TOO_OLD    ResultType = 7
)

var ResultType_name = map[int32]string{
	0: "REFUSE_REASON_NONE",
	1: "REFUSE_REASON_NO_MSG_SERVER",
	2: "REFUSE_REASON_MSG_SERVER_FULL",
	3: "REFUSE_REASON_NO_DB_SERVER",
	4: "REFUSE_REASON_NO_LOGIN_SERVER",
	5: "REFUSE_REASON_NO_ROUTE_SERVER",
	6: "REFUSE_REASON_DB_VALIDATE_FAILED",
	7: "REFUSE_REASON_VERSION_TOO_OLD",
}

var ResultType_value = map[string]int32{
	"REFUSE_REASON_NONE":               0,
	"REFUSE_REASON_NO_MSG_SERVER":      1,
	"REFUSE_REASON_MSG_SERVER_FULL":    2,
	"REFUSE_REASON_NO_DB_SERVER":       3,
	"REFUSE_REASON_NO_LOGIN_SERVER":    4,
	"REFUSE_REASON_NO_ROUTE_SERVER":    5,
	"REFUSE_REASON_DB_VALIDATE_FAILED": 6,
	"REFUSE_REASON_VERSION_TOO_OLD":    7,
}

func (x ResultType) Enum() *ResultType {
	p := new(ResultType)
	*p = x
	return p
}

func (x ResultType) String() string {
	return proto.EnumName(ResultType_name, int32(x))
}

func (x *ResultType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ResultType_value, data, "ResultType")
	if err != nil {
		return err
	}
	*x = ResultType(value)
	return nil
}

func (ResultType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{2}
}

type KickReasonType int32

const (
	KickReasonType_KICK_REASON_DUPLICATE_USER KickReasonType = 1
	KickReasonType_KICK_REASON_MOBILE_KICK    KickReasonType = 2
)

var KickReasonType_name = map[int32]string{
	1: "KICK_REASON_DUPLICATE_USER",
	2: "KICK_REASON_MOBILE_KICK",
}

var KickReasonType_value = map[string]int32{
	"KICK_REASON_DUPLICATE_USER": 1,
	"KICK_REASON_MOBILE_KICK":    2,
}

func (x KickReasonType) Enum() *KickReasonType {
	p := new(KickReasonType)
	*p = x
	return p
}

func (x KickReasonType) String() string {
	return proto.EnumName(KickReasonType_name, int32(x))
}

func (x *KickReasonType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KickReasonType_value, data, "KickReasonType")
	if err != nil {
		return err
	}
	*x = KickReasonType(value)
	return nil
}

func (KickReasonType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{3}
}

type OnlineListType int32

const (
	OnlineListType_ONLINE_LIST_TYPE_FRIEND_LIST OnlineListType = 1
)

var OnlineListType_name = map[int32]string{
	1: "ONLINE_LIST_TYPE_FRIEND_LIST",
}

var OnlineListType_value = map[string]int32{
	"ONLINE_LIST_TYPE_FRIEND_LIST": 1,
}

func (x OnlineListType) Enum() *OnlineListType {
	p := new(OnlineListType)
	*p = x
	return p
}

func (x OnlineListType) String() string {
	return proto.EnumName(OnlineListType_name, int32(x))
}

func (x *OnlineListType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OnlineListType_value, data, "OnlineListType")
	if err != nil {
		return err
	}
	*x = OnlineListType(value)
	return nil
}

func (OnlineListType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{4}
}

type UserStatType int32

const (
	UserStatType_USER_STATUS_ONLINE  UserStatType = 1
	UserStatType_USER_STATUS_OFFLINE UserStatType = 2
	UserStatType_USER_STATUS_LEAVE   UserStatType = 3
)

var UserStatType_name = map[int32]string{
	1: "USER_STATUS_ONLINE",
	2: "USER_STATUS_OFFLINE",
	3: "USER_STATUS_LEAVE",
}

var UserStatType_value = map[string]int32{
	"USER_STATUS_ONLINE":  1,
	"USER_STATUS_OFFLINE": 2,
	"USER_STATUS_LEAVE":   3,
}

func (x UserStatType) Enum() *UserStatType {
	p := new(UserStatType)
	*p = x
	return p
}

func (x UserStatType) String() string {
	return proto.EnumName(UserStatType_name, int32(x))
}

func (x *UserStatType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UserStatType_value, data, "UserStatType")
	if err != nil {
		return err
	}
	*x = UserStatType(value)
	return nil
}

func (UserStatType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{5}
}

type SessionType int32

const (
	SessionType_SESSION_TYPE_SINGLE SessionType = 1
	SessionType_SESSION_TYPE_GROUP  SessionType = 2
)

var SessionType_name = map[int32]string{
	1: "SESSION_TYPE_SINGLE",
	2: "SESSION_TYPE_GROUP",
}

var SessionType_value = map[string]int32{
	"SESSION_TYPE_SINGLE": 1,
	"SESSION_TYPE_GROUP":  2,
}

func (x SessionType) Enum() *SessionType {
	p := new(SessionType)
	*p = x
	return p
}

func (x SessionType) String() string {
	return proto.EnumName(SessionType_name, int32(x))
}

func (x *SessionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SessionType_value, data, "SessionType")
	if err != nil {
		return err
	}
	*x = SessionType(value)
	return nil
}

func (SessionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{6}
}

type MsgType int32

const (
	MsgType_MSG_TYPE_SINGLE_TEXT  MsgType = 1
	MsgType_MSG_TYPE_SINGLE_AUDIO MsgType = 2
	MsgType_MSG_TYPE_GROUP_TEXT   MsgType = 17
	MsgType_MSG_TYPE_GROUP_AUDIO  MsgType = 18
)

var MsgType_name = map[int32]string{
	1:  "MSG_TYPE_SINGLE_TEXT",
	2:  "MSG_TYPE_SINGLE_AUDIO",
	17: "MSG_TYPE_GROUP_TEXT",
	18: "MSG_TYPE_GROUP_AUDIO",
}

var MsgType_value = map[string]int32{
	"MSG_TYPE_SINGLE_TEXT":  1,
	"MSG_TYPE_SINGLE_AUDIO": 2,
	"MSG_TYPE_GROUP_TEXT":   17,
	"MSG_TYPE_GROUP_AUDIO":  18,
}

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}

func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}

func (x *MsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MsgType_value, data, "MsgType")
	if err != nil {
		return err
	}
	*x = MsgType(value)
	return nil
}

func (MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{7}
}

type ClientType int32

const (
	ClientType_CLIENT_TYPE_WINDOWS ClientType = 1
	ClientType_CLIENT_TYPE_MAC     ClientType = 2
	ClientType_CLIENT_TYPE_IOS     ClientType = 17
	ClientType_CLIENT_TYPE_ANDROID ClientType = 18
)

var ClientType_name = map[int32]string{
	1:  "CLIENT_TYPE_WINDOWS",
	2:  "CLIENT_TYPE_MAC",
	17: "CLIENT_TYPE_IOS",
	18: "CLIENT_TYPE_ANDROID",
}

var ClientType_value = map[string]int32{
	"CLIENT_TYPE_WINDOWS": 1,
	"CLIENT_TYPE_MAC":     2,
	"CLIENT_TYPE_IOS":     17,
	"CLIENT_TYPE_ANDROID": 18,
}

func (x ClientType) Enum() *ClientType {
	p := new(ClientType)
	*p = x
	return p
}

func (x ClientType) String() string {
	return proto.EnumName(ClientType_name, int32(x))
}

func (x *ClientType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClientType_value, data, "ClientType")
	if err != nil {
		return err
	}
	*x = ClientType(value)
	return nil
}

func (ClientType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{8}
}

type GroupType int32

const (
	GroupType_GROUP_TYPE_NORMAL GroupType = 1
	GroupType_GROUP_TYPE_TMP    GroupType = 2
)

var GroupType_name = map[int32]string{
	1: "GROUP_TYPE_NORMAL",
	2: "GROUP_TYPE_TMP",
}

var GroupType_value = map[string]int32{
	"GROUP_TYPE_NORMAL": 1,
	"GROUP_TYPE_TMP":    2,
}

func (x GroupType) Enum() *GroupType {
	p := new(GroupType)
	*p = x
	return p
}

func (x GroupType) String() string {
	return proto.EnumName(GroupType_name, int32(x))
}

func (x *GroupType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GroupType_value, data, "GroupType")
	if err != nil {
		return err
	}
	*x = GroupType(value)
	return nil
}

func (GroupType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{9}
}

type GroupModifyType int32

const (
	GroupModifyType_GROUP_MODIFY_TYPE_ADD GroupModifyType = 1
	GroupModifyType_GROUP_MODIFY_TYPE_DEL GroupModifyType = 2
)

var GroupModifyType_name = map[int32]string{
	1: "GROUP_MODIFY_TYPE_ADD",
	2: "GROUP_MODIFY_TYPE_DEL",
}

var GroupModifyType_value = map[string]int32{
	"GROUP_MODIFY_TYPE_ADD": 1,
	"GROUP_MODIFY_TYPE_DEL": 2,
}

func (x GroupModifyType) Enum() *GroupModifyType {
	p := new(GroupModifyType)
	*p = x
	return p
}

func (x GroupModifyType) String() string {
	return proto.EnumName(GroupModifyType_name, int32(x))
}

func (x *GroupModifyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GroupModifyType_value, data, "GroupModifyType")
	if err != nil {
		return err
	}
	*x = GroupModifyType(value)
	return nil
}

func (GroupModifyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{10}
}

type TransferFileType int32

const (
	TransferFileType_FILE_TYPE_ONLINE  TransferFileType = 1
	TransferFileType_FILE_TYPE_OFFLINE TransferFileType = 2
)

var TransferFileType_name = map[int32]string{
	1: "FILE_TYPE_ONLINE",
	2: "FILE_TYPE_OFFLINE",
}

var TransferFileType_value = map[string]int32{
	"FILE_TYPE_ONLINE":  1,
	"FILE_TYPE_OFFLINE": 2,
}

func (x TransferFileType) Enum() *TransferFileType {
	p := new(TransferFileType)
	*p = x
	return p
}

func (x TransferFileType) String() string {
	return proto.EnumName(TransferFileType_name, int32(x))
}

func (x *TransferFileType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TransferFileType_value, data, "TransferFileType")
	if err != nil {
		return err
	}
	*x = TransferFileType(value)
	return nil
}

func (TransferFileType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{11}
}

type ClientFileState int32

const (
	ClientFileState_CLIENT_FILE_PEER_READY ClientFileState = 0
	ClientFileState_CLIENT_FILE_CANCEL     ClientFileState = 1
	ClientFileState_CLIENT_FILE_REFUSE     ClientFileState = 2
	ClientFileState_CLIENT_FILE_DONE       ClientFileState = 3
)

var ClientFileState_name = map[int32]string{
	0: "CLIENT_FILE_PEER_READY",
	1: "CLIENT_FILE_CANCEL",
	2: "CLIENT_FILE_REFUSE",
	3: "CLIENT_FILE_DONE",
}

var ClientFileState_value = map[string]int32{
	"CLIENT_FILE_PEER_READY": 0,
	"CLIENT_FILE_CANCEL":     1,
	"CLIENT_FILE_REFUSE":     2,
	"CLIENT_FILE_DONE":       3,
}

func (x ClientFileState) Enum() *ClientFileState {
	p := new(ClientFileState)
	*p = x
	return p
}

func (x ClientFileState) String() string {
	return proto.EnumName(ClientFileState_name, int32(x))
}

func (x *ClientFileState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClientFileState_value, data, "ClientFileState")
	if err != nil {
		return err
	}
	*x = ClientFileState(value)
	return nil
}

func (ClientFileState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{12}
}

type ClientFileRole int32

const (
	ClientFileRole_CLIENT_REALTIME_SENDER  ClientFileRole = 1
	ClientFileRole_CLIENT_REALTIME_RECVER  ClientFileRole = 2
	ClientFileRole_CLIENT_OFFLINE_UPLOAD   ClientFileRole = 3
	ClientFileRole_CLIENT_OFFLINE_DOWNLOAD ClientFileRole = 4
)

var ClientFileRole_name = map[int32]string{
	1: "CLIENT_REALTIME_SENDER",
	2: "CLIENT_REALTIME_RECVER",
	3: "CLIENT_OFFLINE_UPLOAD",
	4: "CLIENT_OFFLINE_DOWNLOAD",
}

var ClientFileRole_value = map[string]int32{
	"CLIENT_REALTIME_SENDER":  1,
	"CLIENT_REALTIME_RECVER":  2,
	"CLIENT_OFFLINE_UPLOAD":   3,
	"CLIENT_OFFLINE_DOWNLOAD": 4,
}

func (x ClientFileRole) Enum() *ClientFileRole {
	p := new(ClientFileRole)
	*p = x
	return p
}

func (x ClientFileRole) String() string {
	return proto.EnumName(ClientFileRole_name, int32(x))
}

func (x *ClientFileRole) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClientFileRole_value, data, "ClientFileRole")
	if err != nil {
		return err
	}
	*x = ClientFileRole(value)
	return nil
}

func (ClientFileRole) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{13}
}

type FileServerError int32

const (
	FileServerError_FILE_SERVER_ERRNO_OK                               FileServerError = 0
	FileServerError_FILE_SERVER_ERRNO_CREATE_TASK_ID_ERROR             FileServerError = 1
	FileServerError_FILE_SERVER_ERRNO_CREATE_TASK_ERROR                FileServerError = 2
	FileServerError_FILE_SERVER_ERRNO_LOGIN_INVALID_TOKEN              FileServerError = 3
	FileServerError_FILE_SERVER_ERRNO_INVALID_USER_FOR_TASK            FileServerError = 4
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_WITH_INVALID_TASK_ID   FileServerError = 5
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_ILLIEAGE_USER          FileServerError = 6
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_MKDIR_ERROR            FileServerError = 7
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_OPEN_FILE_ERROR        FileServerError = 8
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_READ_FILE_HEADER_ERROR FileServerError = 9
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_ALLOC_MEM_ERROR        FileServerError = 10
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_SEEK_OFFSET_ERROR      FileServerError = 11
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_FINISHED               FileServerError = 12
)

var FileServerError_name = map[int32]string{
	0:  "FILE_SERVER_ERRNO_OK",
	1:  "FILE_SERVER_ERRNO_CREATE_TASK_ID_ERROR",
	2:  "FILE_SERVER_ERRNO_CREATE_TASK_ERROR",
	3:  "FILE_SERVER_ERRNO_LOGIN_INVALID_TOKEN",
	4:  "FILE_SERVER_ERRNO_INVALID_USER_FOR_TASK",
	5:  "FILE_SERVER_ERRNO_PULL_DATA_WITH_INVALID_TASK_ID",
	6:  "FILE_SERVER_ERRNO_PULL_DATA_ILLIEAGE_USER",
	7:  "FILE_SERVER_ERRNO_PULL_DATA_MKDIR_ERROR",
	8:  "FILE_SERVER_ERRNO_PULL_DATA_OPEN_FILE_ERROR",
	9:  "FILE_SERVER_ERRNO_PULL_DATA_READ_FILE_HEADER_ERROR",
	10: "FILE_SERVER_ERRNO_PULL_DATA_ALLOC_MEM_ERROR",
	11: "FILE_SERVER_ERRNO_PULL_DATA_SEEK_OFFSET_ERROR",
	12: "FILE_SERVER_ERRNO_PULL_DATA_FINISHED",
}

var FileServerError_value = map[string]int32{
	"FILE_SERVER_ERRNO_OK":                               0,
	"FILE_SERVER_ERRNO_CREATE_TASK_ID_ERROR":             1,
	"FILE_SERVER_ERRNO_CREATE_TASK_ERROR":                2,
	"FILE_SERVER_ERRNO_LOGIN_INVALID_TOKEN":              3,
	"FILE_SERVER_ERRNO_INVALID_USER_FOR_TASK":            4,
	"FILE_SERVER_ERRNO_PULL_DATA_WITH_INVALID_TASK_ID":   5,
	"FILE_SERVER_ERRNO_PULL_DATA_ILLIEAGE_USER":          6,
	"FILE_SERVER_ERRNO_PULL_DATA_MKDIR_ERROR":            7,
	"FILE_SERVER_ERRNO_PULL_DATA_OPEN_FILE_ERROR":        8,
	"FILE_SERVER_ERRNO_PULL_DATA_READ_FILE_HEADER_ERROR": 9,
	"FILE_SERVER_ERRNO_PULL_DATA_ALLOC_MEM_ERROR":        10,
	"FILE_SERVER_ERRNO_PULL_DATA_SEEK_OFFSET_ERROR":      11,
	"FILE_SERVER_ERRNO_PULL_DATA_FINISHED":               12,
}

func (x FileServerError) Enum() *FileServerError {
	p := new(FileServerError)
	*p = x
	return p
}

func (x FileServerError) String() string {
	return proto.EnumName(FileServerError_name, int32(x))
}

func (x *FileServerError) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FileServerError_value, data, "FileServerError")
	if err != nil {
		return err
	}
	*x = FileServerError(value)
	return nil
}

func (FileServerError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{14}
}

type SessionStatusType int32

const (
	SessionStatusType_SESSION_STATUS_OK     SessionStatusType = 0
	SessionStatusType_SESSION_STATUS_DELETE SessionStatusType = 1
)

var SessionStatusType_name = map[int32]string{
	0: "SESSION_STATUS_OK",
	1: "SESSION_STATUS_DELETE",
}

var SessionStatusType_value = map[string]int32{
	"SESSION_STATUS_OK":     0,
	"SESSION_STATUS_DELETE": 1,
}

func (x SessionStatusType) Enum() *SessionStatusType {
	p := new(SessionStatusType)
	*p = x
	return p
}

func (x SessionStatusType) String() string {
	return proto.EnumName(SessionStatusType_name, int32(x))
}

func (x *SessionStatusType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SessionStatusType_value, data, "SessionStatusType")
	if err != nil {
		return err
	}
	*x = SessionStatusType(value)
	return nil
}

func (SessionStatusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{15}
}

type DepartmentStatusType int32

const (
	DepartmentStatusType_DEPT_STATUS_OK     DepartmentStatusType = 0
	DepartmentStatusType_DEPT_STATUS_DELETE DepartmentStatusType = 1
)

var DepartmentStatusType_name = map[int32]string{
	0: "DEPT_STATUS_OK",
	1: "DEPT_STATUS_DELETE",
}

var DepartmentStatusType_value = map[string]int32{
	"DEPT_STATUS_OK":     0,
	"DEPT_STATUS_DELETE": 1,
}

func (x DepartmentStatusType) Enum() *DepartmentStatusType {
	p := new(DepartmentStatusType)
	*p = x
	return p
}

func (x DepartmentStatusType) String() string {
	return proto.EnumName(DepartmentStatusType_name, int32(x))
}

func (x *DepartmentStatusType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DepartmentStatusType_value, data, "DepartmentStatusType")
	if err != nil {
		return err
	}
	*x = DepartmentStatusType(value)
	return nil
}

func (DepartmentStatusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{16}
}

type IpAddr struct {
	Ip                   *string  `protobuf:"bytes,1,req,name=ip" json:"ip,omitempty"`
	Port                 *uint32  `protobuf:"varint,2,req,name=port" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpAddr) Reset()         { *m = IpAddr{} }
func (m *IpAddr) String() string { return proto.CompactTextString(m) }
func (*IpAddr) ProtoMessage()    {}
func (*IpAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{0}
}

func (m *IpAddr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpAddr.Unmarshal(m, b)
}
func (m *IpAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpAddr.Marshal(b, m, deterministic)
}
func (m *IpAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpAddr.Merge(m, src)
}
func (m *IpAddr) XXX_Size() int {
	return xxx_messageInfo_IpAddr.Size(m)
}
func (m *IpAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_IpAddr.DiscardUnknown(m)
}

var xxx_messageInfo_IpAddr proto.InternalMessageInfo

func (m *IpAddr) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *IpAddr) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

type UserInfo struct {
	UserId               *uint32  `protobuf:"varint,1,req,name=user_id,json=userId" json:"user_id,omitempty"`
	UserGender           *uint32  `protobuf:"varint,2,req,name=user_gender,json=userGender" json:"user_gender,omitempty"`
	UserNickName         *string  `protobuf:"bytes,3,req,name=user_nick_name,json=userNickName" json:"user_nick_name,omitempty"`
	AvatarUrl            *string  `protobuf:"bytes,4,req,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	DepartmentId         *uint32  `protobuf:"varint,5,req,name=department_id,json=departmentId" json:"department_id,omitempty"`
	Email                *string  `protobuf:"bytes,6,req,name=email" json:"email,omitempty"`
	UserRealName         *string  `protobuf:"bytes,7,req,name=user_real_name,json=userRealName" json:"user_real_name,omitempty"`
	UserTel              *string  `protobuf:"bytes,8,req,name=user_tel,json=userTel" json:"user_tel,omitempty"`
	UserDomain           *string  `protobuf:"bytes,9,req,name=user_domain,json=userDomain" json:"user_domain,omitempty"`
	Status               *uint32  `protobuf:"varint,10,req,name=status" json:"status,omitempty"`
	SignInfo             *string  `protobuf:"bytes,11,opt,name=sign_info,json=signInfo" json:"sign_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{1}
}

func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInfo.Unmarshal(m, b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return xxx_messageInfo_UserInfo.Size(m)
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *UserInfo) GetUserGender() uint32 {
	if m != nil && m.UserGender != nil {
		return *m.UserGender
	}
	return 0
}

func (m *UserInfo) GetUserNickName() string {
	if m != nil && m.UserNickName != nil {
		return *m.UserNickName
	}
	return ""
}

func (m *UserInfo) GetAvatarUrl() string {
	if m != nil && m.AvatarUrl != nil {
		return *m.AvatarUrl
	}
	return ""
}

func (m *UserInfo) GetDepartmentId() uint32 {
	if m != nil && m.DepartmentId != nil {
		return *m.DepartmentId
	}
	return 0
}

func (m *UserInfo) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *UserInfo) GetUserRealName() string {
	if m != nil && m.UserRealName != nil {
		return *m.UserRealName
	}
	return ""
}

func (m *UserInfo) GetUserTel() string {
	if m != nil && m.UserTel != nil {
		return *m.UserTel
	}
	return ""
}

func (m *UserInfo) GetUserDomain() string {
	if m != nil && m.UserDomain != nil {
		return *m.UserDomain
	}
	return ""
}

func (m *UserInfo) GetStatus() uint32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *UserInfo) GetSignInfo() string {
	if m != nil && m.SignInfo != nil {
		return *m.SignInfo
	}
	return ""
}

type ContactSessionInfo struct {
	SessionId            *uint32            `protobuf:"varint,1,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	SessionType          *SessionType       `protobuf:"varint,2,req,name=session_type,json=sessionType,enum=IM.BaseDefine.SessionType" json:"session_type,omitempty"`
	SessionStatus        *SessionStatusType `protobuf:"varint,3,req,name=session_status,json=sessionStatus,enum=IM.BaseDefine.SessionStatusType" json:"session_status,omitempty"`
	UpdatedTime          *uint32            `protobuf:"varint,4,req,name=updated_time,json=updatedTime" json:"updated_time,omitempty"`
	LatestMsgId          *uint32            `protobuf:"varint,5,req,name=latest_msg_id,json=latestMsgId" json:"latest_msg_id,omitempty"`
	LatestMsgData        []byte             `protobuf:"bytes,6,req,name=latest_msg_data,json=latestMsgData" json:"latest_msg_data,omitempty"`
	LatestMsgType        *MsgType           `protobuf:"varint,7,req,name=latest_msg_type,json=latestMsgType,enum=IM.BaseDefine.MsgType" json:"latest_msg_type,omitempty"`
	LatestMsgFromUserId  *uint32            `protobuf:"varint,8,req,name=latest_msg_from_user_id,json=latestMsgFromUserId" json:"latest_msg_from_user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ContactSessionInfo) Reset()         { *m = ContactSessionInfo{} }
func (m *ContactSessionInfo) String() string { return proto.CompactTextString(m) }
func (*ContactSessionInfo) ProtoMessage()    {}
func (*ContactSessionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{2}
}

func (m *ContactSessionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContactSessionInfo.Unmarshal(m, b)
}
func (m *ContactSessionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContactSessionInfo.Marshal(b, m, deterministic)
}
func (m *ContactSessionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactSessionInfo.Merge(m, src)
}
func (m *ContactSessionInfo) XXX_Size() int {
	return xxx_messageInfo_ContactSessionInfo.Size(m)
}
func (m *ContactSessionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactSessionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContactSessionInfo proto.InternalMessageInfo

func (m *ContactSessionInfo) GetSessionId() uint32 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *ContactSessionInfo) GetSessionType() SessionType {
	if m != nil && m.SessionType != nil {
		return *m.SessionType
	}
	return SessionType_SESSION_TYPE_SINGLE
}

func (m *ContactSessionInfo) GetSessionStatus() SessionStatusType {
	if m != nil && m.SessionStatus != nil {
		return *m.SessionStatus
	}
	return SessionStatusType_SESSION_STATUS_OK
}

func (m *ContactSessionInfo) GetUpdatedTime() uint32 {
	if m != nil && m.UpdatedTime != nil {
		return *m.UpdatedTime
	}
	return 0
}

func (m *ContactSessionInfo) GetLatestMsgId() uint32 {
	if m != nil && m.LatestMsgId != nil {
		return *m.LatestMsgId
	}
	return 0
}

func (m *ContactSessionInfo) GetLatestMsgData() []byte {
	if m != nil {
		return m.LatestMsgData
	}
	return nil
}

func (m *ContactSessionInfo) GetLatestMsgType() MsgType {
	if m != nil && m.LatestMsgType != nil {
		return *m.LatestMsgType
	}
	return MsgType_MSG_TYPE_SINGLE_TEXT
}

func (m *ContactSessionInfo) GetLatestMsgFromUserId() uint32 {
	if m != nil && m.LatestMsgFromUserId != nil {
		return *m.LatestMsgFromUserId
	}
	return 0
}

type UserStat struct {
	UserId               *uint32       `protobuf:"varint,1,req,name=user_id,json=userId" json:"user_id,omitempty"`
	Status               *UserStatType `protobuf:"varint,2,req,name=status,enum=IM.BaseDefine.UserStatType" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UserStat) Reset()         { *m = UserStat{} }
func (m *UserStat) String() string { return proto.CompactTextString(m) }
func (*UserStat) ProtoMessage()    {}
func (*UserStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{3}
}

func (m *UserStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserStat.Unmarshal(m, b)
}
func (m *UserStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserStat.Marshal(b, m, deterministic)
}
func (m *UserStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserStat.Merge(m, src)
}
func (m *UserStat) XXX_Size() int {
	return xxx_messageInfo_UserStat.Size(m)
}
func (m *UserStat) XXX_DiscardUnknown() {
	xxx_messageInfo_UserStat.DiscardUnknown(m)
}

var xxx_messageInfo_UserStat proto.InternalMessageInfo

func (m *UserStat) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *UserStat) GetStatus() UserStatType {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return UserStatType_USER_STATUS_ONLINE
}

type ServerUserStat struct {
	UserId               *uint32       `protobuf:"varint,1,req,name=user_id,json=userId" json:"user_id,omitempty"`
	Status               *UserStatType `protobuf:"varint,2,req,name=status,enum=IM.BaseDefine.UserStatType" json:"status,omitempty"`
	ClientType           *ClientType   `protobuf:"varint,3,req,name=client_type,json=clientType,enum=IM.BaseDefine.ClientType" json:"client_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ServerUserStat) Reset()         { *m = ServerUserStat{} }
func (m *ServerUserStat) String() string { return proto.CompactTextString(m) }
func (*ServerUserStat) ProtoMessage()    {}
func (*ServerUserStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{4}
}

func (m *ServerUserStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerUserStat.Unmarshal(m, b)
}
func (m *ServerUserStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerUserStat.Marshal(b, m, deterministic)
}
func (m *ServerUserStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerUserStat.Merge(m, src)
}
func (m *ServerUserStat) XXX_Size() int {
	return xxx_messageInfo_ServerUserStat.Size(m)
}
func (m *ServerUserStat) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerUserStat.DiscardUnknown(m)
}

var xxx_messageInfo_ServerUserStat proto.InternalMessageInfo

func (m *ServerUserStat) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ServerUserStat) GetStatus() UserStatType {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return UserStatType_USER_STATUS_ONLINE
}

func (m *ServerUserStat) GetClientType() ClientType {
	if m != nil && m.ClientType != nil {
		return *m.ClientType
	}
	return ClientType_CLIENT_TYPE_WINDOWS
}

type UnreadInfo struct {
	SessionId            *uint32      `protobuf:"varint,1,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	SessionType          *SessionType `protobuf:"varint,2,req,name=session_type,json=sessionType,enum=IM.BaseDefine.SessionType" json:"session_type,omitempty"`
	UnreadCnt            *uint32      `protobuf:"varint,3,req,name=unread_cnt,json=unreadCnt" json:"unread_cnt,omitempty"`
	LatestMsgId          *uint32      `protobuf:"varint,4,req,name=latest_msg_id,json=latestMsgId" json:"latest_msg_id,omitempty"`
	LatestMsgData        []byte       `protobuf:"bytes,5,req,name=latest_msg_data,json=latestMsgData" json:"latest_msg_data,omitempty"`
	LatestMsgType        *MsgType     `protobuf:"varint,6,req,name=latest_msg_type,json=latestMsgType,enum=IM.BaseDefine.MsgType" json:"latest_msg_type,omitempty"`
	LatestMsgFromUserId  *uint32      `protobuf:"varint,7,req,name=latest_msg_from_user_id,json=latestMsgFromUserId" json:"latest_msg_from_user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UnreadInfo) Reset()         { *m = UnreadInfo{} }
func (m *UnreadInfo) String() string { return proto.CompactTextString(m) }
func (*UnreadInfo) ProtoMessage()    {}
func (*UnreadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{5}
}

func (m *UnreadInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnreadInfo.Unmarshal(m, b)
}
func (m *UnreadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnreadInfo.Marshal(b, m, deterministic)
}
func (m *UnreadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnreadInfo.Merge(m, src)
}
func (m *UnreadInfo) XXX_Size() int {
	return xxx_messageInfo_UnreadInfo.Size(m)
}
func (m *UnreadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UnreadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UnreadInfo proto.InternalMessageInfo

func (m *UnreadInfo) GetSessionId() uint32 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *UnreadInfo) GetSessionType() SessionType {
	if m != nil && m.SessionType != nil {
		return *m.SessionType
	}
	return SessionType_SESSION_TYPE_SINGLE
}

func (m *UnreadInfo) GetUnreadCnt() uint32 {
	if m != nil && m.UnreadCnt != nil {
		return *m.UnreadCnt
	}
	return 0
}

func (m *UnreadInfo) GetLatestMsgId() uint32 {
	if m != nil && m.LatestMsgId != nil {
		return *m.LatestMsgId
	}
	return 0
}

func (m *UnreadInfo) GetLatestMsgData() []byte {
	if m != nil {
		return m.LatestMsgData
	}
	return nil
}

func (m *UnreadInfo) GetLatestMsgType() MsgType {
	if m != nil && m.LatestMsgType != nil {
		return *m.LatestMsgType
	}
	return MsgType_MSG_TYPE_SINGLE_TEXT
}

func (m *UnreadInfo) GetLatestMsgFromUserId() uint32 {
	if m != nil && m.LatestMsgFromUserId != nil {
		return *m.LatestMsgFromUserId
	}
	return 0
}

type MsgInfo struct {
	MsgId                *uint32  `protobuf:"varint,1,req,name=msg_id,json=msgId" json:"msg_id,omitempty"`
	FromSessionId        *uint32  `protobuf:"varint,2,req,name=from_session_id,json=fromSessionId" json:"from_session_id,omitempty"`
	CreateTime           *uint32  `protobuf:"varint,3,req,name=create_time,json=createTime" json:"create_time,omitempty"`
	MsgType              *MsgType `protobuf:"varint,4,req,name=msg_type,json=msgType,enum=IM.BaseDefine.MsgType" json:"msg_type,omitempty"`
	MsgData              []byte   `protobuf:"bytes,5,req,name=msg_data,json=msgData" json:"msg_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgInfo) Reset()         { *m = MsgInfo{} }
func (m *MsgInfo) String() string { return proto.CompactTextString(m) }
func (*MsgInfo) ProtoMessage()    {}
func (*MsgInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{6}
}

func (m *MsgInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgInfo.Unmarshal(m, b)
}
func (m *MsgInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgInfo.Marshal(b, m, deterministic)
}
func (m *MsgInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInfo.Merge(m, src)
}
func (m *MsgInfo) XXX_Size() int {
	return xxx_messageInfo_MsgInfo.Size(m)
}
func (m *MsgInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInfo proto.InternalMessageInfo

func (m *MsgInfo) GetMsgId() uint32 {
	if m != nil && m.MsgId != nil {
		return *m.MsgId
	}
	return 0
}

func (m *MsgInfo) GetFromSessionId() uint32 {
	if m != nil && m.FromSessionId != nil {
		return *m.FromSessionId
	}
	return 0
}

func (m *MsgInfo) GetCreateTime() uint32 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *MsgInfo) GetMsgType() MsgType {
	if m != nil && m.MsgType != nil {
		return *m.MsgType
	}
	return MsgType_MSG_TYPE_SINGLE_TEXT
}

func (m *MsgInfo) GetMsgData() []byte {
	if m != nil {
		return m.MsgData
	}
	return nil
}

type GroupVersionInfo struct {
	GroupId              *uint32  `protobuf:"varint,1,req,name=group_id,json=groupId" json:"group_id,omitempty"`
	Version              *uint32  `protobuf:"varint,2,req,name=version" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupVersionInfo) Reset()         { *m = GroupVersionInfo{} }
func (m *GroupVersionInfo) String() string { return proto.CompactTextString(m) }
func (*GroupVersionInfo) ProtoMessage()    {}
func (*GroupVersionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{7}
}

func (m *GroupVersionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupVersionInfo.Unmarshal(m, b)
}
func (m *GroupVersionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupVersionInfo.Marshal(b, m, deterministic)
}
func (m *GroupVersionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupVersionInfo.Merge(m, src)
}
func (m *GroupVersionInfo) XXX_Size() int {
	return xxx_messageInfo_GroupVersionInfo.Size(m)
}
func (m *GroupVersionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupVersionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GroupVersionInfo proto.InternalMessageInfo

func (m *GroupVersionInfo) GetGroupId() uint32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *GroupVersionInfo) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

type GroupInfo struct {
	GroupId              *uint32    `protobuf:"varint,1,req,name=group_id,json=groupId" json:"group_id,omitempty"`
	Version              *uint32    `protobuf:"varint,2,req,name=version" json:"version,omitempty"`
	GroupName            *string    `protobuf:"bytes,3,req,name=group_name,json=groupName" json:"group_name,omitempty"`
	GroupAvatar          *string    `protobuf:"bytes,4,req,name=group_avatar,json=groupAvatar" json:"group_avatar,omitempty"`
	GroupCreatorId       *uint32    `protobuf:"varint,5,req,name=group_creator_id,json=groupCreatorId" json:"group_creator_id,omitempty"`
	GroupType            *GroupType `protobuf:"varint,6,req,name=group_type,json=groupType,enum=IM.BaseDefine.GroupType" json:"group_type,omitempty"`
	ShieldStatus         *uint32    `protobuf:"varint,7,req,name=shield_status,json=shieldStatus" json:"shield_status,omitempty"`
	GroupMemberList      []uint32   `protobuf:"varint,8,rep,name=group_member_list,json=groupMemberList" json:"group_member_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GroupInfo) Reset()         { *m = GroupInfo{} }
func (m *GroupInfo) String() string { return proto.CompactTextString(m) }
func (*GroupInfo) ProtoMessage()    {}
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{8}
}

func (m *GroupInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupInfo.Unmarshal(m, b)
}
func (m *GroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupInfo.Marshal(b, m, deterministic)
}
func (m *GroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupInfo.Merge(m, src)
}
func (m *GroupInfo) XXX_Size() int {
	return xxx_messageInfo_GroupInfo.Size(m)
}
func (m *GroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GroupInfo proto.InternalMessageInfo

func (m *GroupInfo) GetGroupId() uint32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *GroupInfo) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *GroupInfo) GetGroupName() string {
	if m != nil && m.GroupName != nil {
		return *m.GroupName
	}
	return ""
}

func (m *GroupInfo) GetGroupAvatar() string {
	if m != nil && m.GroupAvatar != nil {
		return *m.GroupAvatar
	}
	return ""
}

func (m *GroupInfo) GetGroupCreatorId() uint32 {
	if m != nil && m.GroupCreatorId != nil {
		return *m.GroupCreatorId
	}
	return 0
}

func (m *GroupInfo) GetGroupType() GroupType {
	if m != nil && m.GroupType != nil {
		return *m.GroupType
	}
	return GroupType_GROUP_TYPE_NORMAL
}

func (m *GroupInfo) GetShieldStatus() uint32 {
	if m != nil && m.ShieldStatus != nil {
		return *m.ShieldStatus
	}
	return 0
}

func (m *GroupInfo) GetGroupMemberList() []uint32 {
	if m != nil {
		return m.GroupMemberList
	}
	return nil
}

type UserTokenInfo struct {
	UserId               *uint32     `protobuf:"varint,1,req,name=user_id,json=userId" json:"user_id,omitempty"`
	UserType             *ClientType `protobuf:"varint,2,req,name=user_type,json=userType,enum=IM.BaseDefine.ClientType" json:"user_type,omitempty"`
	Token                *string     `protobuf:"bytes,3,req,name=token" json:"token,omitempty"`
	PushCount            *uint32     `protobuf:"varint,4,req,name=push_count,json=pushCount" json:"push_count,omitempty"`
	PushType             *uint32     `protobuf:"varint,5,req,name=push_type,json=pushType" json:"push_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserTokenInfo) Reset()         { *m = UserTokenInfo{} }
func (m *UserTokenInfo) String() string { return proto.CompactTextString(m) }
func (*UserTokenInfo) ProtoMessage()    {}
func (*UserTokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{9}
}

func (m *UserTokenInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserTokenInfo.Unmarshal(m, b)
}
func (m *UserTokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserTokenInfo.Marshal(b, m, deterministic)
}
func (m *UserTokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTokenInfo.Merge(m, src)
}
func (m *UserTokenInfo) XXX_Size() int {
	return xxx_messageInfo_UserTokenInfo.Size(m)
}
func (m *UserTokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserTokenInfo proto.InternalMessageInfo

func (m *UserTokenInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *UserTokenInfo) GetUserType() ClientType {
	if m != nil && m.UserType != nil {
		return *m.UserType
	}
	return ClientType_CLIENT_TYPE_WINDOWS
}

func (m *UserTokenInfo) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *UserTokenInfo) GetPushCount() uint32 {
	if m != nil && m.PushCount != nil {
		return *m.PushCount
	}
	return 0
}

func (m *UserTokenInfo) GetPushType() uint32 {
	if m != nil && m.PushType != nil {
		return *m.PushType
	}
	return 0
}

type PushResult struct {
	UserToken            *string  `protobuf:"bytes,1,req,name=user_token,json=userToken" json:"user_token,omitempty"`
	ResultCode           *uint32  `protobuf:"varint,2,req,name=result_code,json=resultCode" json:"result_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushResult) Reset()         { *m = PushResult{} }
func (m *PushResult) String() string { return proto.CompactTextString(m) }
func (*PushResult) ProtoMessage()    {}
func (*PushResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{10}
}

func (m *PushResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushResult.Unmarshal(m, b)
}
func (m *PushResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushResult.Marshal(b, m, deterministic)
}
func (m *PushResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushResult.Merge(m, src)
}
func (m *PushResult) XXX_Size() int {
	return xxx_messageInfo_PushResult.Size(m)
}
func (m *PushResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PushResult.DiscardUnknown(m)
}

var xxx_messageInfo_PushResult proto.InternalMessageInfo

func (m *PushResult) GetUserToken() string {
	if m != nil && m.UserToken != nil {
		return *m.UserToken
	}
	return ""
}

func (m *PushResult) GetResultCode() uint32 {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return 0
}

type ShieldStatus struct {
	UserId               *uint32  `protobuf:"varint,1,req,name=user_id,json=userId" json:"user_id,omitempty"`
	GroupId              *uint32  `protobuf:"varint,2,req,name=group_id,json=groupId" json:"group_id,omitempty"`
	ShieldStatus         *uint32  `protobuf:"varint,3,req,name=shield_status,json=shieldStatus" json:"shield_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShieldStatus) Reset()         { *m = ShieldStatus{} }
func (m *ShieldStatus) String() string { return proto.CompactTextString(m) }
func (*ShieldStatus) ProtoMessage()    {}
func (*ShieldStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{11}
}

func (m *ShieldStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShieldStatus.Unmarshal(m, b)
}
func (m *ShieldStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShieldStatus.Marshal(b, m, deterministic)
}
func (m *ShieldStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShieldStatus.Merge(m, src)
}
func (m *ShieldStatus) XXX_Size() int {
	return xxx_messageInfo_ShieldStatus.Size(m)
}
func (m *ShieldStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ShieldStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ShieldStatus proto.InternalMessageInfo

func (m *ShieldStatus) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ShieldStatus) GetGroupId() uint32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *ShieldStatus) GetShieldStatus() uint32 {
	if m != nil && m.ShieldStatus != nil {
		return *m.ShieldStatus
	}
	return 0
}

type OfflineFileInfo struct {
	FromUserId           *uint32  `protobuf:"varint,1,req,name=from_user_id,json=fromUserId" json:"from_user_id,omitempty"`
	TaskId               *string  `protobuf:"bytes,2,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	FileName             *string  `protobuf:"bytes,3,req,name=file_name,json=fileName" json:"file_name,omitempty"`
	FileSize             *uint32  `protobuf:"varint,4,req,name=file_size,json=fileSize" json:"file_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OfflineFileInfo) Reset()         { *m = OfflineFileInfo{} }
func (m *OfflineFileInfo) String() string { return proto.CompactTextString(m) }
func (*OfflineFileInfo) ProtoMessage()    {}
func (*OfflineFileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{12}
}

func (m *OfflineFileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OfflineFileInfo.Unmarshal(m, b)
}
func (m *OfflineFileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OfflineFileInfo.Marshal(b, m, deterministic)
}
func (m *OfflineFileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfflineFileInfo.Merge(m, src)
}
func (m *OfflineFileInfo) XXX_Size() int {
	return xxx_messageInfo_OfflineFileInfo.Size(m)
}
func (m *OfflineFileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OfflineFileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OfflineFileInfo proto.InternalMessageInfo

func (m *OfflineFileInfo) GetFromUserId() uint32 {
	if m != nil && m.FromUserId != nil {
		return *m.FromUserId
	}
	return 0
}

func (m *OfflineFileInfo) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *OfflineFileInfo) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *OfflineFileInfo) GetFileSize() uint32 {
	if m != nil && m.FileSize != nil {
		return *m.FileSize
	}
	return 0
}

type DepartInfo struct {
	DeptId               *uint32               `protobuf:"varint,1,req,name=dept_id,json=deptId" json:"dept_id,omitempty"`
	Priority             *uint32               `protobuf:"varint,2,req,name=priority" json:"priority,omitempty"`
	DeptName             *string               `protobuf:"bytes,3,req,name=dept_name,json=deptName" json:"dept_name,omitempty"`
	ParentDeptId         *uint32               `protobuf:"varint,4,req,name=parent_dept_id,json=parentDeptId" json:"parent_dept_id,omitempty"`
	DeptStatus           *DepartmentStatusType `protobuf:"varint,5,req,name=dept_status,json=deptStatus,enum=IM.BaseDefine.DepartmentStatusType" json:"dept_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DepartInfo) Reset()         { *m = DepartInfo{} }
func (m *DepartInfo) String() string { return proto.CompactTextString(m) }
func (*DepartInfo) ProtoMessage()    {}
func (*DepartInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{13}
}

func (m *DepartInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepartInfo.Unmarshal(m, b)
}
func (m *DepartInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepartInfo.Marshal(b, m, deterministic)
}
func (m *DepartInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepartInfo.Merge(m, src)
}
func (m *DepartInfo) XXX_Size() int {
	return xxx_messageInfo_DepartInfo.Size(m)
}
func (m *DepartInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DepartInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DepartInfo proto.InternalMessageInfo

func (m *DepartInfo) GetDeptId() uint32 {
	if m != nil && m.DeptId != nil {
		return *m.DeptId
	}
	return 0
}

func (m *DepartInfo) GetPriority() uint32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *DepartInfo) GetDeptName() string {
	if m != nil && m.DeptName != nil {
		return *m.DeptName
	}
	return ""
}

func (m *DepartInfo) GetParentDeptId() uint32 {
	if m != nil && m.ParentDeptId != nil {
		return *m.ParentDeptId
	}
	return 0
}

func (m *DepartInfo) GetDeptStatus() DepartmentStatusType {
	if m != nil && m.DeptStatus != nil {
		return *m.DeptStatus
	}
	return DepartmentStatusType_DEPT_STATUS_OK
}

type PushShieldStatus struct {
	UserId               *uint32  `protobuf:"varint,1,req,name=user_id,json=userId" json:"user_id,omitempty"`
	ShieldStatus         *uint32  `protobuf:"varint,2,req,name=shield_status,json=shieldStatus" json:"shield_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushShieldStatus) Reset()         { *m = PushShieldStatus{} }
func (m *PushShieldStatus) String() string { return proto.CompactTextString(m) }
func (*PushShieldStatus) ProtoMessage()    {}
func (*PushShieldStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_bce7478d5e757206, []int{14}
}

func (m *PushShieldStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushShieldStatus.Unmarshal(m, b)
}
func (m *PushShieldStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushShieldStatus.Marshal(b, m, deterministic)
}
func (m *PushShieldStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushShieldStatus.Merge(m, src)
}
func (m *PushShieldStatus) XXX_Size() int {
	return xxx_messageInfo_PushShieldStatus.Size(m)
}
func (m *PushShieldStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PushShieldStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PushShieldStatus proto.InternalMessageInfo

func (m *PushShieldStatus) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PushShieldStatus) GetShieldStatus() uint32 {
	if m != nil && m.ShieldStatus != nil {
		return *m.ShieldStatus
	}
	return 0
}

func init() {
	proto.RegisterEnum("IM.BaseDefine.ServiceID", ServiceID_name, ServiceID_value)
	proto.RegisterEnum("IM.BaseDefine.CommandID", CommandID_name, CommandID_value)
	proto.RegisterEnum("IM.BaseDefine.ResultType", ResultType_name, ResultType_value)
	proto.RegisterEnum("IM.BaseDefine.KickReasonType", KickReasonType_name, KickReasonType_value)
	proto.RegisterEnum("IM.BaseDefine.OnlineListType", OnlineListType_name, OnlineListType_value)
	proto.RegisterEnum("IM.BaseDefine.UserStatType", UserStatType_name, UserStatType_value)
	proto.RegisterEnum("IM.BaseDefine.SessionType", SessionType_name, SessionType_value)
	proto.RegisterEnum("IM.BaseDefine.MsgType", MsgType_name, MsgType_value)
	proto.RegisterEnum("IM.BaseDefine.ClientType", ClientType_name, ClientType_value)
	proto.RegisterEnum("IM.BaseDefine.GroupType", GroupType_name, GroupType_value)
	proto.RegisterEnum("IM.BaseDefine.GroupModifyType", GroupModifyType_name, GroupModifyType_value)
	proto.RegisterEnum("IM.BaseDefine.TransferFileType", TransferFileType_name, TransferFileType_value)
	proto.RegisterEnum("IM.BaseDefine.ClientFileState", ClientFileState_name, ClientFileState_value)
	proto.RegisterEnum("IM.BaseDefine.ClientFileRole", ClientFileRole_name, ClientFileRole_value)
	proto.RegisterEnum("IM.BaseDefine.FileServerError", FileServerError_name, FileServerError_value)
	proto.RegisterEnum("IM.BaseDefine.SessionStatusType", SessionStatusType_name, SessionStatusType_value)
	proto.RegisterEnum("IM.BaseDefine.DepartmentStatusType", DepartmentStatusType_name, DepartmentStatusType_value)
	proto.RegisterType((*IpAddr)(nil), "IM.BaseDefine.IpAddr")
	proto.RegisterType((*UserInfo)(nil), "IM.BaseDefine.UserInfo")
	proto.RegisterType((*ContactSessionInfo)(nil), "IM.BaseDefine.ContactSessionInfo")
	proto.RegisterType((*UserStat)(nil), "IM.BaseDefine.UserStat")
	proto.RegisterType((*ServerUserStat)(nil), "IM.BaseDefine.ServerUserStat")
	proto.RegisterType((*UnreadInfo)(nil), "IM.BaseDefine.UnreadInfo")
	proto.RegisterType((*MsgInfo)(nil), "IM.BaseDefine.MsgInfo")
	proto.RegisterType((*GroupVersionInfo)(nil), "IM.BaseDefine.GroupVersionInfo")
	proto.RegisterType((*GroupInfo)(nil), "IM.BaseDefine.GroupInfo")
	proto.RegisterType((*UserTokenInfo)(nil), "IM.BaseDefine.UserTokenInfo")
	proto.RegisterType((*PushResult)(nil), "IM.BaseDefine.PushResult")
	proto.RegisterType((*ShieldStatus)(nil), "IM.BaseDefine.ShieldStatus")
	proto.RegisterType((*OfflineFileInfo)(nil), "IM.BaseDefine.OfflineFileInfo")
	proto.RegisterType((*DepartInfo)(nil), "IM.BaseDefine.DepartInfo")
	proto.RegisterType((*PushShieldStatus)(nil), "IM.BaseDefine.PushShieldStatus")
}

func init() { proto.RegisterFile("IM.BaseDefine.proto", fileDescriptor_bce7478d5e757206) }

var fileDescriptor_bce7478d5e757206 = []byte{
	// 2951 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x5b, 0x73, 0xdb, 0xc6,
	0x15, 0x0e, 0x21, 0x8a, 0x22, 0x8f, 0x28, 0x6a, 0xb5, 0xb6, 0x64, 0xca, 0x8e, 0x63, 0x99, 0x76,
	0x62, 0x85, 0x89, 0xdd, 0xc6, 0xc9, 0xa4, 0x33, 0x9d, 0x69, 0x3a, 0x10, 0xb0, 0x94, 0x30, 0x02,
	0x01, 0x06, 0x00, 0xe5, 0xf8, 0x09, 0xc3, 0x8a, 0x90, 0x8d, 0x31, 0x6f, 0x05, 0xa1, 0xcc, 0x38,
	0x4f, 0x95, 0xef, 0xd7, 0xdc, 0xda, 0x4e, 0x67, 0xfa, 0xd4, 0xbf, 0xd0, 0xb4, 0xd3, 0xfe, 0x87,
	0xf6, 0x27, 0xf4, 0xa9, 0xbf, 0xa4, 0x9d, 0xbd, 0x91, 0x00, 0x49, 0xd3, 0x9e, 0x4e, 0xdb, 0x37,
	0xed, 0xf9, 0xbe, 0x73, 0xdd, 0xb3, 0x67, 0x97, 0x10, 0x9c, 0x32, 0xea, 0xd7, 0x76, 0x5a, 0xc3,
	0x40, 0x0f, 0x8e, 0xc2, 0x5e, 0x70, 0x6d, 0x10, 0xf5, 0xe3, 0x3e, 0x5e, 0x49, 0x09, 0x2b, 0x1f,
	0x42, 0xce, 0x18, 0xa8, 0xed, 0x76, 0x84, 0x4b, 0xa0, 0x84, 0x83, 0x72, 0x66, 0x4b, 0xd9, 0x2e,
	0x38, 0x4a, 0x38, 0xc0, 0x18, 0xb2, 0x83, 0x7e, 0x14, 0x97, 0x95, 0x2d, 0x65, 0x7b, 0xc5, 0x61,
	0x7f, 0x57, 0xfe, 0xa1, 0x40, 0xbe, 0x39, 0x0c, 0x22, 0xa3, 0x77, 0xd4, 0xc7, 0x67, 0x60, 0xe9,
	0x78, 0x18, 0x44, 0x7e, 0xd8, 0x66, 0x5a, 0x2b, 0x4e, 0x8e, 0x2e, 0x8d, 0x36, 0xbe, 0x00, 0xcb,
	0x0c, 0xb8, 0x15, 0xf4, 0xda, 0x41, 0x24, 0x0c, 0x00, 0x15, 0xed, 0x32, 0x09, 0xbe, 0x0c, 0x25,
	0x46, 0xe8, 0x85, 0x87, 0x77, 0xfc, 0x5e, 0xab, 0x1b, 0x94, 0x17, 0x98, 0xdb, 0x22, 0x95, 0x5a,
	0xe1, 0xe1, 0x1d, 0xab, 0xd5, 0x0d, 0xf0, 0x79, 0x80, 0xd6, 0x97, 0xad, 0xb8, 0x15, 0xf9, 0xc7,
	0x51, 0xa7, 0x9c, 0x65, 0x8c, 0x02, 0x97, 0x34, 0xa3, 0x0e, 0xbe, 0x04, 0x2b, 0xed, 0x60, 0xd0,
	0x8a, 0xe2, 0x6e, 0xd0, 0x8b, 0x69, 0x10, 0x8b, 0xcc, 0x4f, 0x71, 0x2c, 0x34, 0xda, 0xf8, 0x34,
	0x2c, 0x06, 0xdd, 0x56, 0xd8, 0x29, 0xe7, 0x98, 0x3a, 0x5f, 0x8c, 0xfc, 0x47, 0x41, 0xab, 0xc3,
	0xfd, 0x2f, 0x8d, 0xfd, 0x3b, 0x41, 0xab, 0xc3, 0xfc, 0x6f, 0x42, 0x9e, 0xb1, 0xe2, 0xa0, 0x53,
	0xce, 0x33, 0x9c, 0xe5, 0xeb, 0x05, 0x9d, 0x51, 0x86, 0xed, 0x7e, 0xb7, 0x15, 0xf6, 0xca, 0x05,
	0x86, 0xb2, 0x0c, 0x75, 0x26, 0xc1, 0x1b, 0x90, 0x1b, 0xc6, 0xad, 0xf8, 0x78, 0x58, 0x06, 0x5e,
	0x1a, 0xbe, 0xc2, 0xe7, 0xa0, 0x30, 0x0c, 0x6f, 0xf5, 0xfc, 0xb0, 0x77, 0xd4, 0x2f, 0x2f, 0x6f,
	0x65, 0xb6, 0x0b, 0x4e, 0x9e, 0x0a, 0x68, 0x41, 0x2b, 0x7f, 0x58, 0x00, 0xac, 0xf5, 0x7b, 0x71,
	0xeb, 0x30, 0x76, 0x83, 0xe1, 0x30, 0xec, 0x33, 0x31, 0xad, 0xc3, 0x90, 0x2f, 0xc7, 0xa5, 0x2e,
	0x08, 0x89, 0xd1, 0xc6, 0x3f, 0x83, 0xa2, 0x84, 0xe3, 0xbb, 0x83, 0x80, 0x95, 0xbb, 0x74, 0xfd,
	0xec, 0xb5, 0xf4, 0xe6, 0x0b, 0x83, 0xde, 0xdd, 0x41, 0xe0, 0x2c, 0x0f, 0xc7, 0x0b, 0xbc, 0x0b,
	0x25, 0xa9, 0x2e, 0x22, 0x5e, 0x60, 0x06, 0xb6, 0x66, 0x1b, 0x70, 0x19, 0x87, 0x99, 0x59, 0x19,
	0x26, 0x45, 0xf8, 0x22, 0x14, 0x8f, 0x07, 0xed, 0x56, 0x1c, 0xb4, 0xfd, 0x38, 0xec, 0x06, 0x6c,
	0xc3, 0x56, 0x9c, 0x65, 0x21, 0xf3, 0xc2, 0x6e, 0x80, 0x2b, 0xb0, 0xd2, 0x69, 0xc5, 0xc1, 0x30,
	0xf6, 0xbb, 0xc3, 0x5b, 0xe3, 0x2d, 0x5b, 0xe6, 0xc2, 0xfa, 0xf0, 0x96, 0xd1, 0xc6, 0xef, 0xc1,
	0x6a, 0x82, 0xd3, 0x6e, 0xc5, 0x2d, 0xb6, 0x77, 0x45, 0x67, 0x65, 0xc4, 0xd2, 0x5b, 0x71, 0x0b,
	0x7f, 0x96, 0xe2, 0xb1, 0xcc, 0x97, 0x58, 0xe0, 0x1b, 0x13, 0x81, 0xd7, 0x87, 0xb7, 0x78, 0xb8,
	0x23, 0x7d, 0x96, 0xf7, 0x27, 0x70, 0x26, 0xa1, 0x7f, 0x14, 0xf5, 0xbb, 0xbe, 0xec, 0xe6, 0x3c,
	0x8b, 0xea, 0xd4, 0x88, 0x5f, 0x8b, 0xfa, 0x5d, 0xd6, 0xf5, 0xed, 0xca, 0x17, 0xbc, 0xff, 0x69,
	0xca, 0xaf, 0xee, 0xff, 0x8f, 0x47, 0x9b, 0xcf, 0xf7, 0xe2, 0xdc, 0x44, 0x44, 0xd2, 0x02, 0x0b,
	0x4b, 0x50, 0x2b, 0xbf, 0xcf, 0x40, 0xc9, 0x0d, 0xa2, 0x2f, 0x83, 0xe8, 0x7f, 0xe3, 0x00, 0xff,
	0x14, 0x96, 0x0f, 0x3b, 0x21, 0x3d, 0x2b, 0xac, 0x58, 0x7c, 0x97, 0x37, 0x27, 0x34, 0x35, 0xc6,
	0x60, 0x7a, 0x70, 0x38, 0xfa, 0xbb, 0xf2, 0x77, 0x05, 0xa0, 0xd9, 0x8b, 0x82, 0x56, 0xfb, 0xff,
	0xd0, 0x91, 0xe7, 0x01, 0x8e, 0x99, 0x2f, 0xff, 0xb0, 0x17, 0xb3, 0x38, 0x57, 0x9c, 0x02, 0x97,
	0x68, 0xbd, 0x78, 0xba, 0x89, 0xb2, 0x6f, 0xd4, 0x44, 0x8b, 0x6f, 0xd8, 0x44, 0xb9, 0xff, 0x52,
	0x13, 0x2d, 0xbd, 0xba, 0x89, 0xfe, 0x9a, 0x81, 0x25, 0x1a, 0x27, 0x2d, 0xe5, 0x3a, 0xe4, 0x44,
	0x1a, 0xbc, 0x8c, 0x8b, 0x5d, 0x99, 0x00, 0xb3, 0x96, 0x28, 0x33, 0x1f, 0xa3, 0x2b, 0x54, 0xec,
	0x8e, 0x4a, 0x7d, 0x01, 0x96, 0x0f, 0xa3, 0xa0, 0x15, 0x07, 0xfc, 0xcc, 0xf1, 0x62, 0x01, 0x17,
	0xb1, 0x23, 0xf7, 0x11, 0xe4, 0x47, 0xa9, 0x65, 0xe7, 0xa6, 0xb6, 0xd4, 0x15, 0x49, 0x6d, 0x72,
	0x95, 0x44, 0xd5, 0x28, 0x44, 0xeb, 0x55, 0xd9, 0x05, 0xb4, 0x1b, 0xf5, 0x8f, 0x07, 0x07, 0x41,
	0x34, 0x1a, 0x4f, 0x9b, 0x90, 0xbf, 0x45, 0x65, 0xe3, 0x1c, 0x96, 0xd8, 0xda, 0x68, 0xe3, 0x32,
	0x2c, 0x7d, 0xc9, 0x99, 0x22, 0x7a, 0xb9, 0xac, 0xfc, 0x45, 0x81, 0x02, 0xb3, 0xf4, 0x1f, 0x9b,
	0xa0, 0x6d, 0xc2, 0x95, 0x12, 0x17, 0x48, 0x81, 0x49, 0xd8, 0xf4, 0xbe, 0x08, 0x45, 0x0e, 0xf3,
	0x1b, 0x43, 0xdc, 0x1f, 0xcb, 0x4c, 0xa6, 0x32, 0x11, 0xde, 0x06, 0xc4, 0x29, 0xac, 0x5e, 0xfd,
	0x68, 0x3c, 0x91, 0x4a, 0x4c, 0xae, 0x71, 0xb1, 0xd1, 0xc6, 0x3f, 0x91, 0xbe, 0x12, 0x2d, 0x52,
	0x9e, 0xa8, 0x23, 0x4b, 0x87, 0x55, 0x92, 0x47, 0xc1, 0x6a, 0x79, 0x09, 0x56, 0x86, 0xb7, 0xc3,
	0xa0, 0xd3, 0x96, 0xc3, 0x95, 0xb7, 0x45, 0x91, 0x0b, 0xc5, 0xe4, 0xac, 0xc2, 0x1a, 0xb7, 0xde,
	0x0d, 0xba, 0xbf, 0x08, 0x22, 0xbf, 0x13, 0x0e, 0xe3, 0x72, 0x7e, 0x6b, 0x61, 0x7b, 0xc5, 0x59,
	0x65, 0x40, 0x9d, 0xc9, 0xcd, 0x70, 0x18, 0x57, 0x7e, 0xc8, 0xc0, 0x0a, 0x6d, 0x23, 0xaf, 0x7f,
	0x27, 0xe8, 0xcd, 0xbf, 0x86, 0x3f, 0x85, 0x02, 0xbf, 0xbf, 0xc6, 0x67, 0x70, 0xce, 0x71, 0x67,
	0x77, 0x1d, 0x8b, 0xf9, 0x34, 0x2c, 0xc6, 0xd4, 0xba, 0xa8, 0x29, 0x5f, 0xd0, 0x72, 0x0f, 0x8e,
	0x87, 0xb7, 0xfd, 0xc3, 0xfe, 0x71, 0x2f, 0x16, 0x67, 0xae, 0x40, 0x25, 0x1a, 0x15, 0xd0, 0x8b,
	0x8d, 0xc1, 0xcc, 0x19, 0x2f, 0x62, 0x9e, 0x0a, 0xd8, 0xf8, 0x30, 0x01, 0x1a, 0xc7, 0xc3, 0xdb,
	0x4e, 0x30, 0x3c, 0xee, 0xc4, 0xec, 0x7c, 0xb3, 0xb8, 0x98, 0x13, 0xfe, 0xe0, 0x60, 0x91, 0xb2,
	0x9c, 0x68, 0x4b, 0x47, 0x8c, 0xe8, 0x1f, 0xf6, 0xdb, 0x81, 0x7c, 0x3d, 0x70, 0x91, 0xd6, 0x6f,
	0x07, 0x95, 0x5b, 0x50, 0x74, 0x93, 0xe5, 0x7b, 0x65, 0x01, 0x92, 0x6d, 0xa5, 0xa4, 0xdb, 0x6a,
	0x6a, 0x5f, 0x16, 0xa6, 0xf7, 0xa5, 0xf2, 0x28, 0x03, 0xab, 0xf6, 0xd1, 0x51, 0x27, 0xec, 0x05,
	0xb5, 0xb0, 0x13, 0xb0, 0x6a, 0x6f, 0x41, 0x31, 0x75, 0xcc, 0xb9, 0x47, 0x38, 0x1a, 0x9d, 0x6e,
	0x1a, 0x4e, 0xdc, 0x1a, 0xde, 0x91, 0x4e, 0x0b, 0x4e, 0x8e, 0x2e, 0x8d, 0x36, 0x2d, 0xd1, 0x51,
	0xd8, 0x09, 0x92, 0xfd, 0x9a, 0xa7, 0x02, 0xd6, 0xae, 0x12, 0x1c, 0x86, 0x5f, 0xc9, 0xab, 0x93,
	0x81, 0x6e, 0xf8, 0x55, 0x50, 0xf9, 0x5b, 0x06, 0x40, 0x67, 0xcf, 0x1a, 0xb9, 0xe3, 0xed, 0x60,
	0x10, 0x27, 0x12, 0xa6, 0x4b, 0xa3, 0x8d, 0xcf, 0x42, 0x7e, 0x10, 0x85, 0xfd, 0x28, 0x8c, 0xef,
	0x8a, 0x84, 0x47, 0x6b, 0xea, 0x80, 0x29, 0x25, 0xbd, 0x53, 0x01, 0xf3, 0x7e, 0x19, 0x4a, 0x83,
	0x56, 0x44, 0xef, 0x06, 0x69, 0x98, 0x87, 0x50, 0xe4, 0x52, 0x9d, 0x9b, 0xd7, 0x61, 0x99, 0xc1,
	0xa2, 0x64, 0x8b, 0xac, 0xa5, 0x2e, 0x4d, 0xb4, 0x94, 0x3e, 0x7a, 0x7e, 0x25, 0x9e, 0x0a, 0x40,
	0xf5, 0x44, 0x55, 0x1b, 0x80, 0x68, 0x33, 0xbc, 0xd9, 0x16, 0x4e, 0xed, 0x93, 0x32, 0xbd, 0x4f,
	0xd5, 0xef, 0x32, 0x50, 0xa0, 0x57, 0x67, 0x78, 0x18, 0x18, 0x3a, 0x5e, 0x81, 0x82, 0x6b, 0xe8,
	0xbe, 0x69, 0xef, 0x1a, 0x16, 0xca, 0x60, 0x0c, 0x25, 0xba, 0xdc, 0x69, 0xea, 0xfa, 0x4d, 0xdf,
	0x34, 0x5c, 0x0f, 0x29, 0x78, 0x19, 0x96, 0xa8, 0xac, 0xee, 0xee, 0xa2, 0x05, 0xc9, 0xdf, 0x75,
	0xec, 0x66, 0x03, 0x65, 0x71, 0x11, 0xf2, 0x74, 0x59, 0x33, 0x4c, 0x82, 0x16, 0xf1, 0x06, 0x60,
	0xba, 0x72, 0x6f, 0x18, 0x9e, 0xb6, 0xe7, 0xbb, 0xc4, 0x39, 0x30, 0x34, 0x82, 0x72, 0x52, 0xc9,
	0xf6, 0xf6, 0x88, 0x83, 0x96, 0x30, 0x82, 0x22, 0x5d, 0x1a, 0x96, 0x47, 0x1c, 0x4b, 0x35, 0x51,
	0xbe, 0xfa, 0xaf, 0x32, 0x14, 0xb4, 0x7e, 0xb7, 0xdb, 0xea, 0xb5, 0x0d, 0x1d, 0xbf, 0x0d, 0x67,
	0x34, 0x19, 0x93, 0xef, 0x90, 0xcf, 0xa9, 0x6b, 0x6a, 0x8c, 0x38, 0xe8, 0x44, 0x99, 0x44, 0xdd,
	0x04, 0x7a, 0x4f, 0x99, 0xd6, 0x6d, 0xba, 0xc4, 0xe1, 0xd9, 0xdd, 0x9f, 0xa1, 0x3b, 0x46, 0x1f,
	0x28, 0xf8, 0x1c, 0x6c, 0xa4, 0x75, 0xd9, 0x5f, 0x76, 0xd3, 0x43, 0x0f, 0xa7, 0x40, 0x77, 0x0c,
	0x3e, 0x52, 0x70, 0x19, 0x4e, 0x8d, 0xc1, 0x7d, 0x43, 0xdb, 0x67, 0x86, 0xd1, 0x63, 0x05, 0xbf,
	0x03, 0x9b, 0x69, 0x9b, 0x3a, 0xa1, 0x45, 0xf1, 0xec, 0x7d, 0x62, 0xa1, 0x27, 0x53, 0xb8, 0x9b,
	0xc2, 0x9f, 0x2a, 0xf8, 0x02, 0x9c, 0x4d, 0xeb, 0x53, 0xeb, 0x0d, 0x4d, 0x33, 0x0d, 0x62, 0x79,
	0xe8, 0xd9, 0x14, 0xc1, 0x4d, 0x13, 0x9e, 0xcf, 0x88, 0xa0, 0xd1, 0x74, 0xf7, 0x7c, 0x77, 0xcf,
	0x20, 0xa6, 0x8e, 0x5e, 0xcc, 0x88, 0x20, 0x89, 0xbf, 0x54, 0xf0, 0x65, 0xb8, 0x90, 0xd6, 0xff,
	0xbc, 0x49, 0x9c, 0x9b, 0x29, 0xd6, 0xd7, 0x53, 0x2c, 0x77, 0x06, 0xeb, 0x1b, 0x05, 0x5f, 0x87,
	0xab, 0x5a, 0xaa, 0xbd, 0x7c, 0x87, 0x68, 0xc4, 0xf2, 0x7c, 0xcd, 0xb6, 0x3c, 0x55, 0xf3, 0x7c,
	0x97, 0xb8, 0xae, 0x61, 0x33, 0x3f, 0x4d, 0xe2, 0x7a, 0xe8, 0x24, 0x8b, 0x3f, 0x86, 0x6b, 0x6f,
	0xaa, 0xe3, 0x36, 0x6c, 0xcb, 0x25, 0xe8, 0x5e, 0x16, 0x5f, 0x84, 0xb7, 0x27, 0x94, 0x5c, 0x4f,
	0xf5, 0x9a, 0xae, 0x6f, 0xd9, 0x9e, 0x51, 0xbb, 0x89, 0xee, 0x67, 0xf1, 0xbb, 0xb0, 0x35, 0x41,
	0xa1, 0x7b, 0xe6, 0x1b, 0x56, 0xcd, 0x1e, 0xb9, 0x7f, 0x90, 0xc5, 0xef, 0xc1, 0xc5, 0x39, 0x34,
	0xe1, 0xf1, 0xe1, 0x2c, 0x9e, 0x43, 0xea, 0xf6, 0x01, 0x49, 0xa6, 0x84, 0x1e, 0xbd, 0x11, 0xcf,
	0x45, 0x8f, 0xb3, 0xb2, 0xa0, 0x09, 0x9e, 0x6a, 0x9a, 0xdc, 0xb7, 0x8c, 0xee, 0xc9, 0xac, 0x24,
	0x12, 0x2c, 0x11, 0xdc, 0xd3, 0x2c, 0xde, 0x86, 0x4b, 0x33, 0x92, 0x70, 0x65, 0x51, 0xa4, 0xc1,
	0x67, 0x59, 0xfc, 0x3e, 0x5c, 0x9e, 0xcf, 0x14, 0x46, 0x9f, 0xcf, 0xa2, 0x6a, 0x7b, 0xaa, 0xb5,
	0x4b, 0x7c, 0xf5, 0x40, 0xf5, 0xd4, 0x71, 0x98, 0x2f, 0xb2, 0xb8, 0x0a, 0xef, 0xbe, 0x86, 0x2a,
	0xcc, 0xbe, 0x9c, 0xc5, 0x6d, 0x68, 0xa2, 0xaf, 0xd2, 0x7b, 0xf8, 0xf5, 0xac, 0x10, 0x26, 0x8a,
	0x29, 0xa8, 0xdf, 0xcc, 0xaa, 0xbb, 0x4e, 0x1a, 0xaa, 0xe3, 0xd5, 0x69, 0x2b, 0xc9, 0x50, 0xbf,
	0xcd, 0xe2, 0x2b, 0x50, 0x99, 0xc7, 0x13, 0x71, 0x7e, 0x37, 0xcb, 0xb7, 0x48, 0x86, 0xa7, 0xa6,
	0x4b, 0xdf, 0xdf, 0x67, 0xf1, 0x87, 0x70, 0x65, 0x76, 0xfa, 0xae, 0xb1, 0x6b, 0xa5, 0x3b, 0xee,
	0xd7, 0x59, 0x7c, 0x15, 0xb6, 0x5f, 0xcf, 0x16, 0x71, 0xfc, 0x66, 0x96, 0xf1, 0x31, 0x6f, 0x22,
	0x94, 0xdf, 0x66, 0xf1, 0x1a, 0x14, 0x35, 0x3e, 0xcc, 0x7d, 0x5d, 0xf5, 0x54, 0x74, 0x92, 0xc3,
	0xeb, 0x80, 0x92, 0x22, 0x5f, 0xd5, 0xf6, 0xd1, 0xbd, 0x94, 0xd8, 0x21, 0xaa, 0xce, 0xc4, 0xf7,
	0x73, 0x72, 0xd4, 0x8d, 0xc4, 0xc2, 0xf4, 0x83, 0x1c, 0xde, 0x84, 0xd3, 0x12, 0xf1, 0x8c, 0x3a,
	0x19, 0xa5, 0xf4, 0x30, 0x87, 0xcf, 0xc2, 0xfa, 0x04, 0x24, 0xe2, 0x7f, 0x94, 0x93, 0x03, 0x8c,
	0x62, 0x4d, 0x8b, 0x99, 0xd4, 0x12, 0x3b, 0xf2, 0x38, 0x87, 0xb7, 0xe0, 0xdc, 0x4c, 0x82, 0x30,
	0xf1, 0x24, 0xe5, 0x59, 0x34, 0x01, 0x57, 0x7e, 0x9a, 0xf2, 0x2c, 0x20, 0xa1, 0xf6, 0x2c, 0x87,
	0x2b, 0x70, 0x5e, 0x62, 0xbb, 0xc4, 0xf3, 0x4d, 0xd5, 0x23, 0xae, 0xc7, 0x96, 0x86, 0xce, 0x8e,
	0xeb, 0xf3, 0xd7, 0x71, 0xdc, 0x06, 0x7a, 0x91, 0x93, 0x13, 0x54, 0x72, 0x76, 0x6e, 0x26, 0x6d,
	0xbc, 0x9c, 0x8b, 0xbb, 0xe8, 0xeb, 0x91, 0x0f, 0x76, 0xa7, 0xfa, 0x96, 0xed, 0xd4, 0x55, 0x33,
	0x9d, 0xc7, 0x49, 0x1e, 0x5f, 0x82, 0x77, 0x5e, 0xc5, 0x91, 0x53, 0x2f, 0x2f, 0xef, 0x28, 0x4e,
	0x4a, 0xb5, 0xd5, 0xfd, 0xbc, 0xbc, 0xfb, 0x52, 0xa0, 0x50, 0x7d, 0x90, 0xc7, 0xe7, 0xa1, 0x3c,
	0x46, 0x35, 0x87, 0xa8, 0x5e, 0x62, 0x03, 0xf3, 0x32, 0x85, 0x09, 0x58, 0x6e, 0x62, 0x5e, 0x4e,
	0x2b, 0x81, 0xf3, 0x76, 0xad, 0x93, 0xfa, 0x4e, 0x62, 0x5a, 0x3d, 0xce, 0xcb, 0x69, 0x35, 0x9b,
	0x25, 0xb7, 0x73, 0x22, 0x57, 0x7e, 0x79, 0x88, 0xc5, 0x68, 0x63, 0x27, 0x3c, 0x4e, 0x90, 0xe4,
	0x16, 0x4f, 0x98, 0x4a, 0x7b, 0x14, 0x8d, 0xfb, 0x3c, 0x8f, 0xcf, 0x00, 0xd6, 0xc4, 0x23, 0x66,
	0x7c, 0xcd, 0xa1, 0x13, 0x98, 0x09, 0xb8, 0xe8, 0x1e, 0xe0, 0x53, 0x50, 0x1a, 0x01, 0x74, 0x28,
	0x11, 0x74, 0x1f, 0x64, 0xf5, 0x99, 0xb0, 0xd1, 0x34, 0x4d, 0x7e, 0x9a, 0xa8, 0xa9, 0x07, 0xaf,
	0x04, 0xdd, 0x06, 0x7a, 0x08, 0xf2, 0xa8, 0x31, 0x50, 0xa6, 0xf8, 0x08, 0xf0, 0x06, 0xac, 0x25,
	0xc4, 0x22, 0xa9, 0xc7, 0x80, 0x4f, 0xc3, 0xea, 0x48, 0x2e, 0xb2, 0x78, 0x02, 0x72, 0x07, 0x99,
	0x74, 0x4f, 0x75, 0x7d, 0xbb, 0x56, 0x33, 0x0d, 0x8b, 0x19, 0x44, 0x4f, 0xe7, 0xc1, 0x2e, 0x7a,
	0x96, 0x86, 0x55, 0x5d, 0x4f, 0x69, 0x3f, 0x4f, 0xc3, 0x3a, 0x31, 0x53, 0xf0, 0x8b, 0x51, 0xa1,
	0xc4, 0xc3, 0xaf, 0x71, 0xbd, 0xe1, 0x6b, 0x75, 0x1d, 0x9d, 0x14, 0xe5, 0xb4, 0x60, 0x2f, 0x3f,
	0x7f, 0x8f, 0xa8, 0x8e, 0xb7, 0x43, 0x54, 0x0f, 0x9d, 0x94, 0xe4, 0xb1, 0xe7, 0x88, 0xeb, 0xd9,
	0x74, 0xdf, 0xb4, 0x03, 0xbf, 0xa1, 0x6a, 0xfb, 0xc4, 0x43, 0xf7, 0x4a, 0xb2, 0x62, 0x9c, 0x70,
	0xa0, 0x9a, 0x86, 0x2e, 0x7a, 0x12, 0xdd, 0x7f, 0x25, 0xe8, 0x36, 0xd0, 0x83, 0x92, 0xdc, 0x74,
	0x0e, 0xd2, 0x13, 0xc7, 0xdf, 0x54, 0x3e, 0x7b, 0x54, 0x31, 0x0b, 0x0f, 0x5f, 0x4b, 0x72, 0x1b,
	0xe8, 0x51, 0x49, 0xe6, 0xc5, 0x49, 0x8e, 0x4d, 0x77, 0x9b, 0x78, 0xe8, 0xf1, 0x44, 0xf4, 0xb6,
	0xc5, 0x6a, 0x31, 0x7a, 0x17, 0xa0, 0x27, 0x25, 0x79, 0xda, 0x38, 0x81, 0x1e, 0x77, 0xfa, 0x44,
	0xe5, 0xe8, 0xd3, 0x92, 0x7c, 0x9e, 0x70, 0x94, 0xe9, 0x89, 0xab, 0xad, 0xd9, 0xa0, 0x89, 0xa0,
	0x67, 0x25, 0x79, 0xe2, 0x12, 0x14, 0x3a, 0xf5, 0x04, 0xfe, 0x7c, 0xb2, 0x7e, 0xec, 0xfd, 0x9b,
	0x78, 0x79, 0xbe, 0x2c, 0xc9, 0xa9, 0xc2, 0x09, 0x33, 0xef, 0xcf, 0x09, 0x23, 0xec, 0xad, 0xe6,
	0xd9, 0xa3, 0x37, 0x06, 0xfa, 0x66, 0x2e, 0xc1, 0x6d, 0xa0, 0x6f, 0x4b, 0xb2, 0x31, 0xc6, 0x65,
	0x14, 0x47, 0x91, 0xea, 0x7f, 0x37, 0x07, 0x76, 0x1b, 0xe8, 0xfb, 0x92, 0x1c, 0xed, 0x1c, 0x66,
	0xcd, 0xe5, 0x39, 0xaa, 0xe5, 0xd6, 0x44, 0x00, 0x7f, 0x9c, 0xcf, 0x70, 0x1b, 0xe8, 0x87, 0x89,
	0x5a, 0xf2, 0x13, 0xc9, 0xab, 0x61, 0xb0, 0x79, 0x81, 0xfe, 0xf4, 0x1a, 0x8a, 0xdb, 0x40, 0x7f,
	0x2e, 0x55, 0x7f, 0xa7, 0x00, 0xf0, 0x5f, 0xdc, 0xec, 0x57, 0xfd, 0x06, 0x60, 0x87, 0xd4, 0x9a,
	0x2e, 0x6d, 0x38, 0xd5, 0x65, 0x0f, 0x09, 0x8b, 0xa0, 0xb7, 0xf0, 0x05, 0x38, 0x37, 0x29, 0x1f,
	0xed, 0x2e, 0x71, 0x50, 0x06, 0x5f, 0x84, 0xf3, 0x69, 0xc2, 0x18, 0xf5, 0x6b, 0x4d, 0xd3, 0x44,
	0xf4, 0xc1, 0x7d, 0x76, 0xca, 0x86, 0xbe, 0x23, 0x4d, 0x2c, 0x4c, 0x9b, 0xb0, 0x6c, 0xb9, 0x7f,
	0x9c, 0x92, 0x9d, 0x49, 0x71, 0xec, 0xa6, 0x27, 0x13, 0x43, 0x8b, 0xf8, 0x32, 0x6c, 0xa5, 0x29,
	0xfa, 0xce, 0xf8, 0xa0, 0xd4, 0x54, 0xc3, 0x24, 0x3a, 0xca, 0x4d, 0x1b, 0x3a, 0x20, 0x0e, 0x7b,
	0x38, 0x79, 0xb6, 0xed, 0xdb, 0xa6, 0x8e, 0x96, 0xaa, 0x75, 0x28, 0xed, 0x87, 0x87, 0x77, 0x9c,
	0xa0, 0x35, 0x14, 0x9f, 0x1c, 0xdf, 0x81, 0xb3, 0xac, 0xd3, 0xa4, 0xe1, 0x66, 0xc3, 0x34, 0x34,
	0x6a, 0x96, 0xb5, 0x5e, 0x06, 0x9f, 0x83, 0x33, 0x49, 0xbc, 0x6e, 0xef, 0xd0, 0x92, 0x53, 0x11,
	0x52, 0xaa, 0xd7, 0xa1, 0x64, 0xf7, 0x3a, 0x61, 0x2f, 0x30, 0xc3, 0x21, 0xaf, 0xf5, 0x16, 0xbc,
	0x2d, 0x4e, 0x10, 0xbb, 0xd0, 0xbc, 0x9b, 0x0d, 0xe2, 0xd7, 0x1c, 0x83, 0x58, 0x3a, 0xff, 0x05,
	0x9a, 0xa9, 0x1e, 0x40, 0x31, 0xf9, 0x91, 0x96, 0xee, 0x4e, 0xf2, 0xd0, 0x70, 0x6d, 0x94, 0xc1,
	0x67, 0xe0, 0x54, 0x4a, 0xce, 0x87, 0x14, 0x52, 0xf0, 0x3a, 0xac, 0x25, 0x01, 0x93, 0xa8, 0x07,
	0x04, 0x2d, 0x54, 0x3f, 0x83, 0xe5, 0xc4, 0x77, 0x55, 0xaa, 0x2e, 0xdf, 0x8d, 0x2c, 0x08, 0xd7,
	0xb0, 0x76, 0x4d, 0x6a, 0x97, 0xfe, 0xae, 0x4d, 0x02, 0xfc, 0xd7, 0xaf, 0x52, 0xfd, 0x25, 0xfb,
	0x32, 0xc9, 0x74, 0xcb, 0x70, 0x9a, 0xbd, 0x6e, 0xc6, 0x7a, 0xbe, 0x47, 0xbe, 0xf0, 0x50, 0x06,
	0x6f, 0xc2, 0xfa, 0x24, 0xa2, 0x36, 0x75, 0xc3, 0x46, 0x0a, 0x75, 0x38, 0x82, 0xf8, 0x15, 0xc5,
	0x74, 0xd6, 0x52, 0xd6, 0x38, 0xc0, 0x55, 0x70, 0xf5, 0x36, 0xc0, 0xf8, 0x33, 0x14, 0x35, 0xc0,
	0x7f, 0xe8, 0x71, 0xea, 0x0d, 0xc3, 0xd2, 0xed, 0x1b, 0x2e, 0xca, 0xe0, 0x53, 0xb0, 0x9a, 0x04,
	0xea, 0xaa, 0x86, 0x94, 0x49, 0xa1, 0x61, 0xbb, 0x68, 0x6d, 0xd2, 0x84, 0x6a, 0xe9, 0x8e, 0x6d,
	0xe8, 0x08, 0x57, 0x3f, 0x15, 0xdf, 0x1c, 0x99, 0xa3, 0x75, 0x58, 0x13, 0x01, 0x52, 0x12, 0x7f,
	0x7f, 0xf0, 0xcf, 0x05, 0x09, 0xb1, 0x57, 0xa7, 0x45, 0xd9, 0x85, 0x55, 0xa6, 0x57, 0xef, 0xb7,
	0xc3, 0xa3, 0xbb, 0xe2, 0x1b, 0xe9, 0x3a, 0xa7, 0xd5, 0x6d, 0xdd, 0xa8, 0xdd, 0x14, 0x9e, 0x74,
	0x9d, 0x57, 0x67, 0x1a, 0xd2, 0x89, 0x89, 0x94, 0xea, 0xcf, 0x01, 0x79, 0x51, 0xab, 0x37, 0x3c,
	0x0a, 0xa2, 0x5a, 0xd8, 0x09, 0xc4, 0xd7, 0x36, 0xc4, 0x87, 0x00, 0xa5, 0x8d, 0xf6, 0x7d, 0x1d,
	0xd6, 0x12, 0x52, 0xb9, 0xeb, 0xd5, 0x21, 0xac, 0xf2, 0x5a, 0x51, 0x75, 0xda, 0x3c, 0x01, 0x3e,
	0x0b, 0x1b, 0x22, 0x5b, 0x7e, 0x13, 0x13, 0x36, 0x69, 0x54, 0xfd, 0x26, 0x7a, 0x8b, 0xee, 0x72,
	0x12, 0xd3, 0x54, 0x4b, 0x23, 0x26, 0xdf, 0xfd, 0xa4, 0x9c, 0x9f, 0x17, 0xa4, 0xd0, 0x58, 0x92,
	0x72, 0x9d, 0x4e, 0x88, 0x85, 0xea, 0xaf, 0x32, 0x50, 0x1a, 0x7b, 0x75, 0xfa, 0x9d, 0xa4, 0x53,
	0x87, 0xa8, 0x26, 0x7b, 0x00, 0xbb, 0xc4, 0xd2, 0xd9, 0x59, 0x99, 0x81, 0xd1, 0x7b, 0x90, 0x38,
	0x48, 0xa1, 0xb5, 0x11, 0x98, 0xbc, 0x6e, 0x9b, 0x0d, 0xd3, 0x56, 0x75, 0xb4, 0x40, 0x8f, 0xd8,
	0x04, 0xa4, 0xdb, 0x37, 0x2c, 0x06, 0x66, 0xab, 0xff, 0xcc, 0xc2, 0x2a, 0x4b, 0x99, 0xfd, 0x83,
	0x84, 0x44, 0x51, 0x3f, 0xa2, 0x1d, 0x95, 0x1c, 0x7c, 0xc4, 0x71, 0x2c, 0xdb, 0xb7, 0xf7, 0xd1,
	0x5b, 0xb8, 0x0a, 0xef, 0x4d, 0x23, 0xe2, 0x89, 0xe7, 0xa9, 0xee, 0x3e, 0x7d, 0xa8, 0x12, 0xc7,
	0xb1, 0x69, 0xb4, 0x57, 0xe0, 0xd2, 0x7c, 0x2e, 0x27, 0x2a, 0xf8, 0x7d, 0x78, 0x77, 0x9a, 0xc8,
	0x87, 0x98, 0x61, 0xb1, 0x31, 0xc4, 0x2f, 0x5a, 0xb4, 0x80, 0x3f, 0x80, 0x2b, 0xd3, 0x54, 0x49,
	0x62, 0xa7, 0xb6, 0x66, 0x3b, 0xcc, 0x3a, 0xca, 0xe2, 0x4f, 0xe0, 0xc7, 0xd3, 0xe4, 0xf1, 0x7b,
	0xea, 0x86, 0xe1, 0xed, 0x8d, 0x1d, 0xf0, 0xe0, 0xd1, 0x22, 0xbe, 0x0a, 0xef, 0xcf, 0xd3, 0x32,
	0x4c, 0xd3, 0x20, 0xea, 0xae, 0x98, 0x5f, 0xb9, 0xd9, 0x11, 0x8d, 0xe9, 0xf5, 0x7d, 0xdd, 0x70,
	0x44, 0xa6, 0x4b, 0xf8, 0x47, 0xf0, 0xc1, 0x3c, 0xb2, 0xdd, 0x20, 0x16, 0xef, 0x0f, 0xae, 0x90,
	0xc7, 0x9f, 0xc2, 0xf5, 0x79, 0x0a, 0xec, 0x07, 0x0e, 0x7f, 0xa5, 0x11, 0x55, 0x27, 0xd2, 0x51,
	0xe1, 0x75, 0x8e, 0x54, 0xd3, 0xb4, 0x35, 0xfa, 0xb6, 0x15, 0x0a, 0x80, 0x3f, 0x82, 0xab, 0xf3,
	0x14, 0x5c, 0x42, 0xf6, 0x69, 0xf7, 0xb8, 0xc4, 0x13, 0x2a, 0xcb, 0x78, 0x1b, 0x2e, 0xcf, 0x53,
	0xa9, 0x19, 0x96, 0xe1, 0xee, 0x11, 0x1d, 0x15, 0xab, 0x04, 0xd6, 0xa6, 0xfe, 0xc7, 0x49, 0xcf,
	0xa1, 0x9c, 0x93, 0x72, 0x04, 0xd3, 0x0e, 0xdb, 0x84, 0xf5, 0x09, 0xb1, 0x4e, 0x4c, 0xe2, 0x11,
	0x94, 0xa9, 0xee, 0xc0, 0xe9, 0x59, 0x9f, 0x40, 0xe9, 0x60, 0xd1, 0x49, 0xc3, 0x4b, 0x99, 0xd9,
	0x00, 0x9c, 0x94, 0x49, 0x1b, 0x3b, 0xca, 0xde, 0xc2, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x03,
	0x51, 0x19, 0x56, 0xbd, 0x1f, 0x00, 0x00,
}
